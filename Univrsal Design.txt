// finalpro.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<GL/glut.h>
#include<math.h>
#include<stdio.h>
#include<string.h>

void drawCircleC1(float x1,float y1, double radius,int x,int y)
{
		glLineWidth(3.0);
	glBegin(GL_LINE_LOOP);
	for (int angle=0;angle<360;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(radius+x)+x1,sin(d)*(radius+y)+y1);
	}
	glEnd();
    glLineWidth(1.0);
}
void drawCircleC(float x1,float y1, double radius,int x,int y)
{
		glLineWidth(1.0);
	glBegin(GL_POLYGON);
	for (int angle=0;angle<360;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(radius+x)+x1,sin(d)*(radius+y)+y1);
	}
	glEnd();

}
void drawCircleR1(double r,int l,int v)
{
	glLineWidth(1.0);
	glPointSize(2.0);
	glBegin(GL_LINES);
	glVertex2f(0,0);
	glVertex2f((r-7)+v,-(r-7));
	glVertex2f(0,0);
	glVertex2f(-(r-7)-v,-(r-7));
	glVertex2f(0,0);
	glVertex2f(v,-r);
	glVertex2f(0,0);
	glVertex2f(r+v,0);
	glVertex2f(0,0);
	glVertex2f(-r-v,0);
	glVertex2f(0,0);
	glVertex2f(-(r-7)-v,(r-7));
	glVertex2f(0,0);
	glVertex2f((r-7)+v,(r-7));
	glVertex2f(0,0);
	glVertex2f(v,r);
	glEnd();
}
void drawText( float x, float y, int r, int g, int b, const char *string ) 
{
	int j = strlen( string );
 
	glColor3f( r, g, b );
	glRasterPos2f( x, y );
	for( int i = 0; i < j; i++ ) {
		glutBitmapCharacter( GLUT_BITMAP_TIMES_ROMAN_24, string[i] );
	}
}

void display12()
{

	glClearColor(0.294,0.0,0.510,0.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	
	drawText(50,440,1,1,1,"UNIVERSAL DESIGN:");
	drawText(50,400,1,1,0,"It refers to broad-spectrum ideas meant to produce buildings,products and");

	drawText(50,380,1,1,0,"environments that are inherently accessible to older people,people");
	
	drawText(50,360,1,1,0,"without disabilities,and people with disabilities.");
	drawText(50,300,1,1,1,"Case 1:");
	drawText(50,280,1,1,1,"Case 2:");
	drawText(50,260,1,1,1,"Case 3:");
	drawText(50,240,1,1,1,"Case 4:");
	drawText(50,220,1,1,1,"Case 5:");
	drawText(50,200,1,1,1,"Case 6:");
	drawText(50,180,1,1,1,"Case 7:");
	drawText(50,160,1,1,1,"Case 8:");
	drawText(50,140,1,1,1,"Case 9:");
	drawText(85,300,1,1,0,"Bus scene before Universal Design");
	drawText(85,280,1,1,0,"Bus scene after Universal Design");
	drawText(85,260,1,1,0,"School scene before Universal Design");
	drawText(85,240,1,1,0,"School scene after Universal Design");
	drawText(85,220,1,1,0,"Agriculture scene before Universal Design");
	drawText(85,200,1,1,0,"Agriculture scene after Universal Design");
	drawText(85,180,1,1,0,"Train scene before Universal Design");
	drawText(85,160,1,1,0,"Train scene after Universal Design");
	drawText(85,140,1,1,0,"Exit!!!");
	glFlush();
}

void drawCircle(float x1,float y1, double radius)
{
		glLineWidth(1.0);
    float x2,y2;
	float angle;
	glPointSize(1);
	glBegin(GL_TRIANGLE_FAN);
	glVertex2f(x1,y1);
	for (angle=0.0f;angle<=3*3.14159f;angle+=0.2)
	{
		x2 = x1+sin(angle)*radius;
		y2 = y1+cos(angle)*radius;
		glVertex2f(x2,y2);
	}
	glEnd();

}
void drawCircleW(float x1,float y1, double radius)
{
		glLineWidth(3.0);
	glBegin(GL_LINE_LOOP);
	for (int angle=0;angle<360;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(radius)+x1,sin(d)*radius+y1);
	}
	glEnd();

}
void drawCircleL(float x1,float y1, double radius)
{
		//glLineWidth(3.0);
	glBegin(GL_POLYGON);
	for (int angle=270;angle<450;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(radius)+x1,sin(d)*radius+y1);
	}
	glEnd();

}
void drawCircleK(float x1,float y1, double radius)
{
		//glLineWidth(3.0);
	glBegin(GL_POLYGON);
	for (int angle=90;angle<270;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(radius)+x1,sin(d)*radius+y1);
	}
	glEnd();

}
void drawCircleR(double r)
{
	glLineWidth(1.0);
	glPointSize(2.0);
	glBegin(GL_LINES);
	glVertex2f(0,0);
	glVertex2f((r-5),-(r-5));
	glVertex2f(0,0);
	glVertex2f(-(r-5),-(r-5));
	glVertex2f(0,0);
	glVertex2f(0,-r);
	glVertex2f(0,0);
	glVertex2f(r,0);
	glVertex2f(0,0);
	glVertex2f(-r,0);
	glVertex2f(0,0);
	glVertex2f(-(r-5),(r-5));
	glVertex2f(0,0);
	glVertex2f((r-5),(r-5));
	glVertex2f(0,0);
	glVertex2f(0,r);
	glEnd();
}
void slope(int s)
{
	if(s==1)
	{
    glColor3f(0,0.5,1);
		glBegin(GL_POLYGON);
	glVertex2f(235.0,195.0);
	glVertex2f(255.0,207.5);
	glVertex2f(248.0,220.0);
	glVertex2f(235.0,213.0);
	glEnd();
	}
}

void bus(float p1,float p2,float p3,int s,int i)
{
	glColor3f(0.5,0.5,0.5);
	drawCircleC(167.0,217.0,15.0,-7,0);
    glColor3f(0,0,0);
	drawCircleC(166.0,212.0,5.0,-2,0);
	glPushMatrix();
	glTranslatef(166.0,212.0,0);
	glRotatef(i,0,0,1);
    drawCircleR(8);
	glPopMatrix();
	glColor3f(0.376,0.376,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(150.0,300.0);
	glVertex2f(350.0,400.0);
	glVertex2f(380.0,350.0);
	glVertex2f(200.0,250.0);
	glEnd();
	glColor3f(p1,p2,p3);
	glBegin(GL_POLYGON);
	glVertex2f(150.0,300.0);
	glVertex2f(150.0,225.0);
	glVertex2f(200.0,175.0);
	glVertex2f(200.0,250.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(380.0,350.0);
	glVertex2f(380.0,280.0);
	glVertex2f(200.0,175.0);
	glVertex2f(200.0,250.0);
	glEnd();
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINES);
	glVertex2f(150.0,300.0);
	glVertex2f(150.0,225.0);
	glVertex2f(200.0,175.0);
	glVertex2f(200.0,250.0);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(380.0,350.0);
	glVertex2f(380.0,280.0);
	glVertex2f(200.0,175.0);
	glVertex2f(200.0,250.0);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(150.0,300.0);
	glVertex2f(200.0,250.0);
	glEnd();

	glLineWidth(1.0);
	glColor3f(0.5,0.5,0.5);
	drawCircleC(220.0,187.0,15.0,-7,0);
	drawCircleC(350.0,265.0,15.0,-7,0);
    glColor3f(0.0,0.0,0.0);	
    drawCircleC(220.0,187.0,5.0,-2,0);
	drawCircleC(350.0,265.0,5.0,-2,0);
	glPushMatrix();
	glTranslatef(220.0,187.0,0);
	glRotatef(i,0,0,1);
    drawCircleR(8);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(350.0,265.0,0);
	glRotatef(i,0,0,1);
	drawCircleR(8);
	glPopMatrix();

	glColor3f(1.0,1.0,1.0);
    glBegin(GL_POLYGON);
	glVertex2f(270.0,260.0);
	glVertex2f(270.0,240.0);
	glVertex2f(280.0,247.0);
	glVertex2f(280.0,267.0);
	glEnd();
    glBegin(GL_POLYGON);
	glVertex2f(290.0,272.0);
	glVertex2f(290.0,252.0);
	glVertex2f(300.0,259.0);
	glVertex2f(300.0,279.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(310.0,284.0);
	glVertex2f(310.0,264.0);
	glVertex2f(320.0,271.0);
	glVertex2f(320.0,291.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(330.0,296.0);
	glVertex2f(330.0,276.0);
	glVertex2f(340.0,283.0);
	glVertex2f(340.0,303.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(350.0,308.0);
	glVertex2f(350.0,288.0);
	glVertex2f(360.0,295.0);
	glVertex2f(360.0,315.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(370.0,320.0);
	glVertex2f(370.0,300.0);
	glVertex2f(380.0,307.0);
	glVertex2f(380.0,327.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(235.0,250.0);
	glVertex2f(235.0,195.0);
	glVertex2f(255.0,207.5);
	glVertex2f(255.0,262.0);
	glEnd();
	glColor3f(0.0,0.0,0.0);
    glBegin(GL_LINES);
	glVertex2f(235.0,250.0);
	glVertex2f(235.0,195.0);
		glVertex2f(235.0,195.0);
	glVertex2f(255.0,207.5);
	glVertex2f(255.0,207.5);
	glVertex2f(255.0,262.0);
	glVertex2f(255.0,262.0);
	glVertex2f(235.0,250.0);



	//inside bus door
	glVertex2f(248.0,258.0);
	glVertex2f(248.0,203.5);
	glVertex2f(248.0,220.5);
	glVertex2f(255.0,207.5);
	glVertex2f(248.0,220.5);
	glVertex2f(235.0,213.5);
	glEnd();
//Stairs in the bus
	glBegin(GL_POLYGON);
		glVertex2f(235.0,213.5);
	    glVertex2f(235.0,209.0);
		glVertex2f(248.0,216.0);
		glVertex2f(248.0,220.5);
	glEnd();
    glBegin(GL_POLYGON);
		glVertex2f(235.0,207.5);
	    glVertex2f(235.0,203.0);
		glVertex2f(248.0,210.5);
		glVertex2f(248.0,215.0);
	glEnd();
	glBegin(GL_POLYGON);
		glVertex2f(235.0,202.0);
	    glVertex2f(235.0,197.5);
		glVertex2f(248.0,205.0);
		glVertex2f(248.0,209.5);
	glEnd();
	//bus front side
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(155.0,250.0);
	glVertex2f(155.0,288.0);
	glVertex2f(170.0,273.5);
	glVertex2f(170.0,235.0);	
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(195.0,213.0);
	glVertex2f(195.0,247.5);
	glVertex2f(180.0,262.5);
	glVertex2f(180.0,227.5);	
	glEnd();
	glColor3f(1.0,1.0,0.0);
	drawCircle(160.0,227.0,5.0);
	drawCircle(187.0,202.0,5.0);
	glColor3f(0.0,0.0,0.0);
	glLineWidth(10.0);
		glBegin(GL_LINES);
	glVertex2f(150.0,254.5);
	glVertex2f(200.0,204.5);
	glEnd();
	glLineWidth(5.0);
	glBegin(GL_LINES);
	glVertex2f(175.0,275.0);
	glVertex2f(175.0,229.5);
	glEnd();

}
void Display_on_screen(char *string)
{
	  
     while(*string){
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *string++);
	 }
	 
}
void background(float z1,float z2,float z3)
{
		glLineWidth(1.0);
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(0.0,0.0);
	glVertex2f(500.0,0.0);
	glVertex2f(500.0,500.0);
	glVertex2f(0.0,500.0);	
	glEnd();

	glPointSize(10.0);
	glColor3f(0.627,0.627,0.627);
	glBegin(GL_POLYGON);
	glVertex2f(100.0,0.0);
	glVertex2f(500.0,300.0);
	glVertex2f(500.0,0.0);
	glEnd();
    glColor3f(z1,z2,z3);
	glBegin(GL_POLYGON);
	glVertex2f(0.0,150.0);
	glVertex2f(500.0,500.0);
	glVertex2f(0.0,500.0);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(0.0,10.0);
	glVertex2f(45.0,45.0);
	glVertex2f(50.0,40.0);
	glVertex2f(05.0,5.0);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(100.0,100.0);
	glVertex2f(145.0,135.0);
	glVertex2f(150.0,130.0);
	glVertex2f(105.0,95.0);
	glEnd();
		glBegin(GL_POLYGON);
	glVertex2f(200.0,180.0);
	glVertex2f(245.0,215.0);
	glVertex2f(250.0,210.0);
	glVertex2f(205.0,175.0);
	glEnd();
//	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(300.0,260.0);
	glVertex2f(345.0,295.0);
	glVertex2f(350.0,290.0);
	glVertex2f(305.0,255.0);
	glEnd();
//	glColor3f(1.0,1.0,1.0);
    glBegin(GL_POLYGON);
	glVertex2f(400.0,340.0);
	glVertex2f(445.0,375.0);
	glVertex2f(450.0,370.0);
	glVertex2f(405.0,335.0);
	glEnd();
	//tree
		glColor3f(1.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(50,185);
	glVertex2f(100,220);
	glVertex2f(80,350);
	glVertex2f(60,350);
	glEnd();
	glColor3f(0, 1, 0);
	drawCircle(40,350,25);
	drawCircle(70,350,25);
	drawCircle(100,350,25);
	drawCircle(55,370,25);
	drawCircle(85,370,25);
	drawCircle(70,390,25);
	//sun
	glColor3f(0.98,0.83,0.25);
	drawCircle(230,460,25);
	//clouds
	glColor3f(1.0,1.0,1.0);
	drawCircle(200,400,25);
	drawCircle(230,400,25);
	drawCircle(260,400,25);
	drawCircle(215,420,25);
	drawCircle(245,420,25);
	drawCircle(180,410,25);
		//busstand
	glColor3f(1.0,0.2,0);
    glBegin(GL_POLYGON);
	glVertex2f(475,100);
	glVertex2f(500,100);
	glVertex2f(500,250);
	glVertex2f(475,250);
	glEnd();
		glColor3f(0.9,0.9,0.9);
    glBegin(GL_POLYGON);
	glVertex2f(500,250);
	glVertex2f(430,250);
	glVertex2f(430,300);
	glVertex2f(500,300);
	glEnd();

	glColor3f(0.0,0.0,0.0);
		glRasterPos3f(455,275,0);
  	 Display_on_screen("Bus Stop");


}
void man(void)
{
	glLineWidth(1.0);
	//man
	glColor3f(0.0,0.0,0.0);
  drawCircle(250,90.5,7.5);
    glColor3f(0.917,0.752,0.525);
	drawCircle(250,87.5,7.5);//face
	glBegin(GL_POLYGON);
	glVertex2f(248,80);
	glVertex2f(248,75);
	glVertex2f(252,75);
	glVertex2f(252,80);
	glEnd();//neck
	glColor3f(0.917,0.752,0.525);
		glBegin(GL_POLYGON);
	glVertex2f(243,71);
	glVertex2f(241,76);
	glVertex2f(240,76);
	glVertex2f(241,67);
	glEnd();//hand
	glBegin(GL_POLYGON);
	glVertex2f(257,71);
	glVertex2f(251,63);
	glVertex2f(251,61);
	glVertex2f(259,67);
	glEnd();//hand
	glColor3f(0.0,0.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(248,75);
	glVertex2f(243,71);
	glVertex2f(241,67);
	glVertex2f(248,73);
	glEnd();//shoulder
		glBegin(GL_POLYGON);
	glVertex2f(252,75);
	glVertex2f(257,71);
	glVertex2f(259,67);
	glVertex2f(252,73);
	glEnd();//shoulder
		glBegin(GL_POLYGON);
	glVertex2f(248,75);
	glVertex2f(245,60);
	glVertex2f(255,60);
	glVertex2f(252,75);
	glEnd();//body
glColor3f(1.0,1.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(245,60);
	glVertex2f(242,48);
	glVertex2f(247,48);
	glVertex2f(250,60);
	glEnd();//leg
	glBegin(GL_POLYGON);
	glVertex2f(255,60);
	glVertex2f(258,48);
	glVertex2f(253,48);
	glVertex2f(250,60);
	glEnd();//leg
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(242,48);
	glVertex2f(247,48);
	glVertex2f(247,45);
	glVertex2f(242,45);
	glEnd();//shoe
	glBegin(GL_POLYGON);
	glVertex2f(253,48);
	glVertex2f(258,48);
	glVertex2f(258,45);
	glVertex2f(253,45);
	glEnd();//shoe
    
}
void wheelChair(int i)
{
//H-capped person
	glLineWidth(1.0);
	glColor3f(0.0,0.0,0.0);
  drawCircle(340,120,10);
 
	 glColor3f(0.917,0.752,0.525);
	drawCircle(340,116,10);
	//glColor3f(0.0,0.0,0.0);
	 glBegin(GL_POINTS);
glColor3f(0.0,0.0,0.0);
  glPointSize(800);
  glVertex2f(333,119);
  glEnd();

  glBegin(GL_LINES);
  glVertex2f(331,113);
  glVertex2f(335,113);
  glEnd();
   glColor3f(0.917,0.752,0.525);
	glBegin(GL_POLYGON);
	glVertex2f(342,107);
	glVertex2f(338,107);
	glVertex2f(338,102);
	glVertex2f(342,102);
	glEnd();//neck
    glColor3f(1.0,1,0);
		glBegin(GL_POLYGON);
	glVertex2f(345,102);
	glVertex2f(335,102);
	glVertex2f(327,80);
	glVertex2f(347,75);
	glEnd();//body
	glColor3f(0,0,1);
	drawCircleL(345,70,7);
	glBegin(GL_POLYGON);
	glVertex2f(347,75);
	glVertex2f(347,65);
	glVertex2f(325,65);
	glVertex2f(325,80);
	glEnd();//legs
    glColor3f(0.917,0.752,0.525);
	glBegin(GL_POLYGON);
	glVertex2f(320,77);
	glVertex2f(315,50);
	glVertex2f(320,50);
	glVertex2f(323,65);
	glEnd();//legs
	drawCircleK(325,72.5,5);
	glBegin(GL_POLYGON);
	glVertex2f(330,67);
	glVertex2f(327,67);
	glVertex2f(327,50);
	glVertex2f(330,50);
	glEnd();//legs
		glColor3f(0,0,1);
		glBegin(GL_POLYGON);
	glVertex2f(340,95);
	glVertex2f(337,95);
	glVertex2f(334,85);
	glVertex2f(340,85);
	glEnd();//hand
	glColor3f(0.57,0.42,0.18);
	glBegin(GL_POLYGON);
	glVertex2f(340,85);
	glVertex2f(323,82);
	glVertex2f(323,80);
	glVertex2f(340,80);
	glEnd();//hand


	//chair
   	glColor3f(0.7,0.13,0.13);
  	glBegin(GL_POLYGON);
	glVertex2f(350,60);
	glVertex2f(350,120);
	glVertex2f(353,120);
	glVertex2f(353,60);
	glEnd();
    glBegin(GL_POLYGON);
	glVertex2f(350,63);
	glVertex2f(350,58);
	glVertex2f(320,63);
	glVertex2f(320,68);
	glEnd();
	glColor3f(0.7,0.13,0.13);
	drawCircleW(332,42,18);
    drawCircleW(342,42,18);
	glColor3f(0,0,0.56);
	glPushMatrix();
	glTranslatef(332.0,42.0,0);
	glRotatef(i,0,0,1);
	drawCircleR(18);
    glPopMatrix();
	glPushMatrix();
	glTranslatef(342.0,42.0,0);
	glRotatef(i,0,0,1);
	drawCircleR(18);
	glPopMatrix();
	glColor3f(0,0,0.5);
	drawCircle(332,42,3);
	drawCircle(342,42,3);
		glColor3f(0.7,0.13,0.13);
	glLineWidth(2.0);
    glBegin(GL_LINES);
	glVertex2f(346,64);
    glVertex2f(346,80);
	glVertex2f(346,80);
	glVertex2f(322,85);
	glVertex2f(322,85);
	glVertex2f(322,66.5);
	glEnd();
	
	glLineWidth(1.0);
	glBegin(GL_LINES);
	glVertex2f(350,115);
    glVertex2f(360,115);
    glEnd();
	glColor3f(0,0,0);
		glLineWidth(4.0);
		glBegin(GL_LINES);
	glVertex2f(356,115.5);
	glVertex2f(360,115.5);
	glVertex2f(360,117.5);
	glVertex2f(360,105.5);
	glEnd();
	
}
void wheelChairB(int i)
{
	glColor3f(0.7,0.13,0.13);
   	glBegin(GL_POLYGON);
	glVertex2f(320,160);
	glVertex2f(350,160);
	glVertex2f(350,100);
	glVertex2f(320,100);
	glEnd();
	drawCircleC1(320,95,10,-5,20);
	drawCircleC1(350,95,10,-5,20);
 	glColor3f(0,0,0.56);
	drawCircleC(320,95,2,0,4);
	drawCircleC(350,95,2,0,4);
	glPushMatrix();
	glTranslatef(320.0,95.0,0);
	glRotatef(i,0,0,1);
    drawCircleR(3);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(350.0,95.0,0);
	glRotatef(i,0,0,1);
	drawCircleR(3);
	glPopMatrix();
}
void square(int x,int y)
{
	glBegin(GL_POLYGON);
		glVertex2f(x,y);
	glVertex2f(x+10,y);
	glVertex2f(x+10,y+10);
	glVertex2f(x,y+10);
	glEnd();
	
}

void richmen(int a, int b,float z)
{
	//face
	
	int x=a,y=b;
	int rd=15*z,hr=7*z;
	const float DEG2RAD=3.1415f/180;
	glBegin(GL_POLYGON);
		glColor3f(0.871,0.722,0.529);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*rd+(x),sin(degInRad)*rd+(y));

		}
		glEnd();
		//eye
		glBegin(GL_POLYGON);
		glColor3f(1,1,1);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*2*z+(x-5*z),sin(degInRad)*2*z+(y));

		}
		glEnd();
		//eye
		glBegin(GL_POLYGON);
		glColor3f(1,1,1);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*2*z+(x+5*z),sin(degInRad)*2*z+(y));

		}
		glEnd();
		glBegin(GL_POLYGON);
		glColor3f(0,0,0);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*2*z+(x-5*z),sin(degInRad)*2*z+(y-2*z));

		}
		glEnd();
		//eye
		glBegin(GL_POLYGON);
		glColor3f(0,0,0);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*2*z+(x+5*z),sin(degInRad)*2*z+(y-2*z));

		}
		glEnd();
		//mouth
		
		glBegin(GL_LINE_STRIP);
		glColor3f(1,0,0);
		for(int k=180;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*3*z+(x),sin(degInRad)*3*z+(y-7*z));

		}
		glEnd();

		//hair
		glBegin(GL_POLYGON);
		glColor3f(0,0,0);
		for(int k=0;k<180;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*17*z+(x),sin(degInRad)*17*z+(y+4*z));

		}
		glEnd();
		
		//body top
		glColor3f(0.125,0.698,0.667);
		glBegin(GL_POLYGON);
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		//COAT
		glLineWidth(3);
		glColor3f(0.827,0.827,0.827);
		glBegin(GL_POLYGON);
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x-8*z),(y-15*z));
		glVertex2f((x),(y-35*z));
		glVertex2f((x),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		glColor3f(0.9,0.827,0.827);
		glBegin(GL_POLYGON);
		glVertex2f((x+8*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		//neck
		glBegin(GL_POLYGON);
		glColor3f(0.961,1,0.980);
		for(int k=180;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*8*z+(x),sin(degInRad)*8*z+(y-15*z));

		}
		glEnd();
		
		//hands right
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f((x+10*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+22*z),(y-75*z));
		glVertex2f((x+17*z),(y-75*z));
		glEnd();
		glBegin(GL_POLYGON);
		glColor3f(0.961,0.871,0.702);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*3*z+(x+19*z),sin(degInRad)*3*z+(y-78*z));

		}
		glEnd();

		//hands left
		//hands right
		glColor3f(0.980,0.922,0.843);
		glBegin(GL_POLYGON);
		glVertex2f((x-10*z),(y-15*z));
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x-22*z),(y-75*z));
		glVertex2f((x-17*z),(y-75*z));
		glEnd();
		glBegin(GL_POLYGON);
		glColor3f(0.961,0.871,0.702);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*3*z+(x-19*z),sin(degInRad)*3*z+(y-77*z));

		}
		glEnd();

		//lungi
		//pant
		glColor3f(0,0,1);
		glBegin(GL_POLYGON);
		
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x+15*z),(y-155*z));
		glVertex2f((x+7*z),(y-155*z));
		glVertex2f((x+2*z),(y-85*z));
		glEnd();
		glColor3f(0,0,1);
		glBegin(GL_POLYGON);
		glVertex2f((x-2*z),(y-85*z));
		glVertex2f((x-7*z),(y-155*z));
		glVertex2f((x-15*z),(y-155*z));
		
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		

}

void bman(int a, int b,float z)
{
	//face
	
	int x=a,y=b;
	int rd=15*z,hr=7*z;
	const float DEG2RAD=3.1415f/180;
	
		//hair
		//glBegin(GL_POLYGON);
		glColor3f(0,0,0);
		/*for(int k=0;k<180;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*17*z+(x),sin(degInRad)*17*z+(y+4*z));

		}
		glEnd();
		*/

	drawCircle(410,249,6.5);
		//body top
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		//COAT
		glLineWidth(3);
		glColor3f(0.827,0.827,0.827);
		glBegin(GL_POLYGON);
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x-8*z),(y-15*z));
		glVertex2f((x),(y-35*z));
		glVertex2f((x),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		glColor3f(0.9,0.827,0.827);
		glBegin(GL_POLYGON);
		glVertex2f((x+8*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		//neck
		glBegin(GL_POLYGON);
		glColor3f(0.871,0.722,0.529);
		for(int k=180;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*8*z+(x),sin(degInRad)*8*z+(y-15*z));

		}
		glEnd();
		
		//hands right
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f((x+10*z),(y-15*z));
		glVertex2f((x+15*z),(y-15*z));
		glVertex2f((x+22*z),(y-75*z));
		glVertex2f((x+17*z),(y-75*z));
		glEnd();
		glBegin(GL_POLYGON);
		glColor3f(0.961,0.871,0.702);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*3*z+(x+19*z),sin(degInRad)*3*z+(y-78*z));

		}
		glEnd();

		//hands left
		//hands right
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
		glVertex2f((x-10*z),(y-15*z));
		glVertex2f((x-15*z),(y-15*z));
		glVertex2f((x-22*z),(y-75*z));
		glVertex2f((x-17*z),(y-75*z));
		glEnd();
		glBegin(GL_POLYGON);
		glColor3f(0.961,0.871,0.702);
		for(int k=0;k<360;k++)
		{
			float degInRad=k*DEG2RAD;
			glVertex2f(cos(degInRad)*3*z+(x-19*z),sin(degInRad)*3*z+(y-77*z));

		}
		glEnd();

		//lungi
		//pant
		glColor3f(1,0,0);
		glBegin(GL_POLYGON);
		
		glVertex2f((x+15*z),(y-85*z));
		glVertex2f((x+15*z),(y-155*z));
		glVertex2f((x+7*z),(y-155*z));
		glVertex2f((x+2*z),(y-85*z));
		glEnd();
		glColor3f(1,0,0);
		glBegin(GL_POLYGON);
		glVertex2f((x-2*z),(y-85*z));
		glVertex2f((x-7*z),(y-155*z));
		glVertex2f((x-15*z),(y-155*z));
		
		glVertex2f((x-15*z),(y-85*z));
		glEnd();
		

}

void star(int x,int y)
{	//stars
	glColor3f(1,1,1);
	glBegin(GL_POLYGON);
	glVertex2f(x+2,y+2);
	glVertex2f(x+4,y);
	glVertex2f(x+2,y+4);
	glVertex2f(x,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x-1,y+3);
	glVertex2f(x+2,y+2);
	glVertex2f(x+5,y+3);
	glEnd();

	
}
void buildings(void)
{
	//stars
	star(450,480);
	star(270,490);
	star(10,480);
	star(150,470);
	star(170,330);
	star(420,470);
	//building1
	
	
	glColor3f(0.118,0.5665,1);
	glBegin(GL_POLYGON);
	glVertex2f(10,157);
	glVertex2f(10,400);
	glVertex2f(150,490);
	glVertex2f(150,255);
	glEnd();


	
	glColor3f(0,0.749,1);	
	glBegin(GL_POLYGON);
	glVertex2f(150,490);
	glVertex2f(100,510);
	glVertex2f(-70,450);
	glVertex2f(10,400);
	glEnd();
	glColor3f(0,0,1);
	//square(120,450);
	square(120,400);
	square(120,350);
	square(120,300);
	square(120,250);
	square(80,400);
	square(80,350);
	square(80,300);
	square(80,250);
	square(40,400);
	square(40,350);
	square(40,300);
 square(10,300);
 square(10,250);
 square(10,350);
 
 
 
 
 
	//door enterence
		glColor3f(0.275,0.510,0.706);
	glBegin(GL_POLYGON);
	glVertex2f(0,450);
	glVertex2f(10,400);
	glVertex2f(10,157);
	glVertex2f(0,150);
	glEnd();
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(25,167);
	glVertex2f(25,225);
	glVertex2f(75,260);
	glVertex2f(75,202);
	glEnd();
	//doors
glColor3f(0.63,0.32,0.18);
	glBegin(GL_POLYGON);
	glVertex2f(25,225);
	glVertex2f(40,216);
	glVertex2f(40,180);
	glVertex2f(25,167);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(75,260);
	glVertex2f(60,245);
	glVertex2f(60,198);
	glVertex2f(75,202);
	glEnd();
	//building3
	glColor3f(0.545,0.27,0.07);
	glBegin(GL_POLYGON);
	glVertex2f(275,425);
	glVertex2f(275,342);
	glVertex2f(400,430);
	glVertex2f(400,510);
	glEnd();
	glColor3f(0.63,0.32,0.18);
	glBegin(GL_POLYGON);
	glVertex2f(275,425);
	glVertex2f(400,510);
	glVertex2f(330,525);
	glVertex2f(210,450);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(275,342);
	glVertex2f(275,390);
	glVertex2f(290,400);
	glVertex2f(290,353);
	glEnd();
	//building2
		glColor3f(1,0.08,0.57);
	glBegin(GL_POLYGON);
	glVertex2f(200,289);
	glVertex2f(200,425);
	glVertex2f(275,475);
	glVertex2f(275,342);
	glEnd();
		glColor3f(1,0.71,0.76);	
	glBegin(GL_POLYGON);
	glVertex2f(275,475);
	glVertex2f(250,505);
	glVertex2f(175,467);
	glVertex2f(200,425);
	glEnd();
	glColor3f(1,0.41,0.7);
	glBegin(GL_POLYGON);
	glVertex2f(200,425);
	glVertex2f(175,467);
	glVertex2f(175,273);
	glVertex2f(200,289);
	glEnd();
}



void display1(void)
{
int i;	

	for(i=0;i<1200;i+=1)
	{
	glClear(GL_COLOR_BUFFER_BIT);
			background(0.0,0.8,0.8);
			
			man();
			wheelChair(0);
		glPushMatrix();
		glTranslatef(-(0.0+i)/10,-(0.0+i)/10,0.0);
		bus(0,0.5,1,0,i);
		glPopMatrix();
		glFlush();
		glutSwapBuffers();
	}
      for(i=0;i<500;i++)
	  {
		  background(0.0,0.8,0.8);
		  glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(0,0.5,1,0,0);
		  glPopMatrix();
		  glPushMatrix();
		glTranslatef(-(0.0+5*i)/22.2,(0.0+i)/22.0,0.0);
		man();
        glPopMatrix();
		 glPushMatrix();
		glTranslatef(-(0.0+5*i)/15+70,(0.0+i)/20,0.0);
     	glScalef(0.8,0.8,0);
		wheelChair(i);
        glPopMatrix();
	glFlush();
	  }
      for(i=0;i<800;i++)
	  {
	  background(0.0,0.8,0.8);
	 
		  glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(0,0.5,1,0,0);
		  glPopMatrix();
		  glPushMatrix();
		glTranslatef(-(112.39+0.01*i),(22+0.03*i),0.0);
		man();
        glPopMatrix();
		 glPushMatrix();
		 glTranslatef(-120,20,0);
		 	glScalef(0.8,0.8,0);
	  wheelChair(0);
	  glPopMatrix();
        glFlush();
	  }
	   background(0.0,0.8,0.8);
		  glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(0,0.5,1,0,0);
		  glPopMatrix();
		  glPushMatrix();
		  glTranslatef(-120,20,0);
		  	glScalef(0.8,0.8,0);
	  wheelChair(0);
	  glPopMatrix();
       	glFlush();
		for(i=0;i<2500;i++)
		{
			 background(0.0,0.8,0.8);
			glPushMatrix();
		    glTranslatef(-(0.0+i)/10-117.55,-(0.0+i)/10-117.55,0.0);
		  bus(0,0.5,1,0,i);
		    glPopMatrix();
 		 glPushMatrix();
		 	glTranslatef((0.0+5*i)/50-120,-(0.0+i)/80+20,0.0);
		 	glScalef(0.8,0.8,0);
	  wheelChair(i);
	  glPopMatrix();
	  glFlush();
	   glutSwapBuffers();
		}
	  for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}
void display2(void)
{
		int i;
	for(i=0;i<1200;i+=1)
	{
		glClear(GL_COLOR_BUFFER_BIT);
			background(0.0,0.2,0.4);
			buildings();
			man();
			wheelChair(0);
		glPushMatrix();
		glTranslatef(-(0.0+i)/10,-(0.0+i)/10,0.0);
		bus(1,0.2,0.2,1,i);
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-(0.0+i)/10,-(0.0+i)/10,0.0);
		slope(1);
		glPopMatrix();
		glFlush();
		glutSwapBuffers();
	}
	for(i=0;i<500;i++)
	  {
		  background(0.0,0.2,0.4);
		  buildings();
		 glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(1,0.2,0.2,1,0);
		  glPopMatrix();
		  glPushMatrix();
		glTranslatef(-117.55,-117.55,0.0);
		slope(1);
		glPopMatrix();
		  glPushMatrix();
		glTranslatef(-(0.0+5*i)/22.2,(0.0+i)/22.0,0.0);
		man();
        glPopMatrix();
		 glPushMatrix();
		glTranslatef(-(0.0+5*i)/15+70,(0.0+i)/20,0.0);
     	glScalef(0.8,0.8,0);
		wheelChair(i);
        glPopMatrix();
	glFlush();
	}
	for(i=0;i<100;i++)
	{
		background(0,0.2,0.4);
		buildings();
         glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(1,0.2,0.2,1,0);
		 glPopMatrix();
		  glPushMatrix();
		glTranslatef(-117.55,-117.55,0.0);
		slope(1);
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-117.55+i/16,-i/8-117.55,0);
		slope(1);
		glPopMatrix();
		  glPushMatrix();
		glTranslatef(-112.39,22,0.0);
		man();
        glPopMatrix();
		 glPushMatrix();
		glTranslatef(-120,20,0.0);
     	glScalef(0.8,0.8,0);
		wheelChair(0);
        glPopMatrix();
	glFlush();
	}
	for(i=0;i<800;i++)
	  {
	  background(0.0,0.2,0.4);
	 buildings();
		  glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(1,0.2,0.2,1,0);
		 glPopMatrix();
		  glPushMatrix();
		glTranslatef(-117.55,-117.55,0.0);
		slope(1);
		glPopMatrix();
		   glPushMatrix();
		glTranslatef(-117.55+100/16,-100/8-117.55,0);
		slope(1);
		glPopMatrix();
		  glPushMatrix();
		glTranslatef(-(112.39+0.01*i),(22+0.03*i),0.0);
		man();
        glPopMatrix();
		 glPushMatrix();
		 glTranslatef(-120,20,0);
		 	glScalef(0.8,0.8,0);
	  wheelChair(0);
	  glPopMatrix();
        glFlush();
	  }
	for(i=0;i<800;i++)
	{
		background(0.0,0.2,0.4);
		buildings();
		 glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(1,0.2,0.2,1,0);
		  glPopMatrix();
		  glPushMatrix();
		glTranslatef(-117.55,-117.55,0.0);
		slope(1);
		glPopMatrix();
		glPushMatrix();
		glTranslatef(-117.55+100/16,-100/8-117.55,0);
		slope(1);
		glPopMatrix();
		  glPushMatrix();
		 	glTranslatef(-(112.39+0.02*i),(22+0.03*i),0.0);
		  	glScalef(0.8,0.8,0);
	  wheelChair(i);
	  glPopMatrix();
       	glFlush();
	}
		background(0.0,0.2,0.4);
		buildings();
		  glPushMatrix();
		  glTranslatef(-117.55,-117.55,0.0);
		  bus(1,0.2,0.2,1,0);
		  glPopMatrix();
		  glPushMatrix();
		glTranslatef(-117.55,-117.55,0.0);
		slope(1);
		glPopMatrix();
       	glFlush();
			for(i=0;i<2500;i++)
		{
			 background(0.0,0.2,0.4);
			 buildings();
			 glPushMatrix();
		  glTranslatef(-(0.0+i)/10-117.55,-(0.0+i)/10-117.55,0.0);
		  bus(1,0.2,0.2,1,i);
		  glPopMatrix();
 		  glPushMatrix();
		glTranslatef(-(0.0+i)/10-117.55,-(0.0+i)/10-117.55,0.0);
		slope(1);
		glPopMatrix();
	  glFlush();
	}

			for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}

void wall(void)
{
	//wall
	glColor3f(0.98,0.922,0.843);
	glBegin(GL_POLYGON);
	glVertex2f(44.0,-100.0);
	glVertex2f(44.0,499.0);
	glVertex2f(444.0,499.0);
	glVertex2f(444.0,-100.0);
	glEnd();
	
	//wallright
	glBegin(GL_POLYGON);
	glColor3f(0.647,0.647,0.647);
	glVertex2f(44.0,499.0);
	glVertex2f(44.0,310.0);
	glVertex2f(70.0,310.0);
	glVertex2f(70.0,499.0);
	glEnd();
	
	glBegin(GL_POLYGON);
	glColor3f(0.827,0.827,0.827);
	glVertex2f(70.0,310.0);
	glVertex2f(200.0,380.0);
	glVertex2f(180.0,500.0);
	glVertex2f(70.0,500.0);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex2f(75.0,500.0);
	glVertex2f(75.0,445.0);
	glVertex2f(155.0,445.0);
	glVertex2f(155.0,500.0);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0,0,0);
	glVertex2f(80.0,497.0);
	glVertex2f(80.0,450.0);
	glVertex2f(150.0,450.0);
	glVertex2f(150.0,497.0);
	glEnd();


	



	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(44,1);
	glVertex2f(44,100);
	glVertex2f(444,100);
	glVertex2f(444,1);
    glEnd();
	glColor3f(0,1,0);
	glBegin(GL_POLYGON);
	glVertex2f(44,1);
	glVertex2f(44,20);
	glVertex2f(444,20);
	glVertex2f(444,1);
    glEnd();
	

}
void staircase(void)
{
	
    glColor3f(1.0,0.0,1.0);
	//steps(89.0,0.0);
	glBegin(GL_POLYGON);
	//1ST POLE
	glColor3f(0.647,0.164,0.164);
	glVertex2f(20.0,499.0);
	glVertex2f(20.0,-100.0);
	glVertex2f(44.0,-100.0);
	glVertex2f(44.0,499.0);
	glEnd();

    glBegin(GL_POLYGON);
	//4TH POLE
	glColor3f(0.647,0.164,0.164);
	glVertex2f(444.0,499.0);
	glVertex2f(444.0,-100.0);
	glVertex2f(469.0,-100.0);
	glVertex2f(469.0,499.0);
	glEnd();

	//2nd pole
	glBegin(GL_POLYGON);
	//glColor3f(0.627,0.627,0.627);
	glColor3f(0.647,0.164,0.164);
	glVertex2f(76.0,1.0);
	glVertex2f(89.0,1.0);
	glVertex2f(89.0,127.0);
	glVertex2f(76.0,127.0);
	glEnd();
	
	//3rd pole
    glBegin(GL_POLYGON);
	glColor3f(0.4,0.14,0.14);
	glVertex2f(280.0,1.0);
	glVertex2f(293.0,1.0);
	glVertex2f(293.0,127.0);
	glVertex2f(280.0,127.0);
	glEnd();

	//1st staris
    glBegin(GL_POLYGON);
	glColor3f(0.3,0.3,0.3);
	glVertex2f(89.0,1.0);
	glVertex2f(243.0,400.0);
	glVertex2f(177.0,400.0);
	glVertex2f(89.0,127.0);
	glEnd();
	//2nd stairs
     glBegin(GL_POLYGON);
	glVertex2f(293.0,1.0);
	glVertex2f(406.0,400.0);
	glVertex2f(361.0,400.0);
	glVertex2f(293.0,127.0);
	glEnd();

	glColor3f(0.627,0.627,0.627);
	glBegin(GL_POLYGON);
	glVertex2f(293.0,1.0);
	glVertex2f(444.0,250.0);
	glVertex2f(444.0,400.0);
	glVertex2f(406.0,400.0);
	glEnd();
}
void man3(float x,float y)
{
	//head code
	glColor3f(1.0,0.9,0.8);
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y+90);
	glVertex2f(x-20,y+110);
	glVertex2f(x-10,y+130);
	glVertex2f(x,y+135);
	glVertex2f(x+10,y+130);
	glVertex2f(x+20,y+110);
	glVertex2f(x+20,y+90);
	glVertex2f(x,y+75);
	glEnd();
	
	// face code
	
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(x-10,y+130);
	glVertex2f(x,y+135);
	glVertex2f(x+10,y+130);
	glVertex2f(x+15,y+120);
	glVertex2f(x+10,y+135);
	glVertex2f(x,y+125);
	glVertex2f(x-5,y+130);
	glVertex2f(x-10,y+120);
	glVertex2f(x-15,y+125);
	glVertex2f(x-15,y+130);
	glEnd();


	// shirt code 
	glColor3f(0.255,0.412,0.822);

	glBegin(GL_POLYGON);
	glVertex2f(x,y);
	glVertex2f(x-20,y);
	glVertex2f(x-20,y+70);
	glVertex2f(x-20,y+80);
	glVertex2f(x-15,y+80);
	glVertex2f(x,y+70);
	glVertex2f(x+15,y+80);
	glVertex2f(x+20,y+80);
	glVertex2f(x+20,y+70);
	glVertex2f(x+20,y);
	glVertex2f(x,y);
	glEnd();
	// scholders and hands code
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y+65);
	glVertex2f(x-20,y+80);
	glVertex2f(x-30,y+80);
	glVertex2f(x-45,y+55);
	glVertex2f(x-45,y+55);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+20,y+65);
	glVertex2f(x+20,y+80);
	glVertex2f(x+30,y+80);
	glVertex2f(x+45,y+55);
	glVertex2f(x+45,y+55);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+45,y+55);
	glVertex2f(x+35,y);
	glVertex2f(x+25,y);
	glVertex2f(x+35,y+58);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x-45,y+55);
	glVertex2f(x-35,y);
	glVertex2f(x-25,y);
	glVertex2f(x-35,y+58);
	glEnd();
	
	//pant code

	glColor3f(0.871,0.722,0.529);
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y);
	glVertex2f(x+20,y);
	glVertex2f(x+25,y-40);
	glVertex2f(x+10,y-40);
	glVertex2f(x,y-10);
	glVertex2f(x-10,y-40);
	glVertex2f(x-25,y-40);
	glVertex2f(x-20,y);
	glEnd();
	// legs code
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(x-25,y-40);
	glVertex2f(x-20,y-80);
	glVertex2f(x-15,y-80);
	glVertex2f(x-10,y-40);
	glEnd();
	glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(x-15,y-80);
	glVertex2f(x-20,y-80);
	glVertex2f(x-20,y-90);
	glVertex2f(x-15,y-90);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(x+25,y-40);
	glVertex2f(x+20,y-80);
	glVertex2f(x+15,y-80);
	glVertex2f(x+10,y-40);
	glEnd();
	glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(x+15,y-80);
	glVertex2f(x+20,y-80);
	glVertex2f(x+20,y-90);
	glVertex2f(x+15,y-90);
	glEnd();

}

void steps(float x1,float x2)
{
	glLineWidth(4.0);

	//glLineWidth(0.5);
	int i;
	glColor3f(0.0,0.0,0.0);
	for(i=0;i<=21;i++)
	{
		glBegin(GL_LINES);
		glVertex2f((4*i)+x1,18*i+x2);
		glVertex2f((4*i)+(x1+190),18*i+x2);
		glEnd();

	}
}

void boy()
{    
      //SCHOOL BOY
 	  glBegin(GL_POLYGON);
   	  glColor3f(0.0,0.0,0.0);
	  glVertex2f(239,85);
	  glVertex2f(252,80);
	  glVertex2f(252,74);
	  glVertex2f(239,76);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.824,0.706,0.549);
	  glVertex2f(239,85);
	  glVertex2f(247,80);
	  glVertex2f(252,122);
	  glVertex2f(242,122);
	  glEnd();//leg
	  glBegin(GL_POLYGON);
   	  glColor3f(0.824,0.706,0.549);
	  glVertex2f(248,122);
	  glVertex2f(255,122);
	  glVertex2f(260,92);
	  glVertex2f(252,86);
	  glEnd();//leg
	  glBegin(GL_POLYGON);
   	  glColor3f(0.0,0.0,0.0);
	  glVertex2f(252,86);
	  glVertex2f(265,100);
	  glVertex2f(267,94);
	  glVertex2f(254,78);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.741,0.718,0.420);
	  glVertex2f(241,122);
	  glVertex2f(258,122);
	  glVertex2f(260,150);
	  glVertex2f(235,150);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.824,0.706,0.549);
	  glVertex2f(240,212);
	  glVertex2f(254,212);
	  glVertex2f(254,218);
	  glVertex2f(240,218);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.0,0.0,1.0);
	  glVertex2f(253,198);
	  glVertex2f(262,201);
	  glVertex2f(269,181);
	  glVertex2f(263,172);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.824,0.706,0.549);
	  glVertex2f(264,174);
	  glVertex2f(268,182);
	  glVertex2f(274,160);
	  glVertex2f(269,160);
	  glEnd();
      glBegin(GL_POLYGON);
   	  glColor3f(0.0,0.0,1.0);
	  glVertex2f(240,210);
	  glVertex2f(235,187);
	  glVertex2f(225,172);
	  glVertex2f(220,182);
	  glEnd();
	  glBegin(GL_POLYGON);
   	  glColor3f(0.824,0.706,0.549);

	  glVertex2f(225,182);
	  glVertex2f(222,172);
	  glVertex2f(232,160);
	  glVertex2f(237,160);
	  glEnd();
      
  
int radius = 15;
int i;
const float deg2rad=3.14159/180;
	glBegin(GL_POLYGON);
	glColor3f(1,0,0);
	for(i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+245,sin(degInRad)*radius+145);
	}
	glEnd();  
    radius = 15;
	glBegin(GL_POLYGON);
	glColor3f(0.275,0.51,0.706);
	for(i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+247,sin(degInRad)*radius+198);
	}
	glEnd();
	glBegin(GL_LINES);
   	  glColor3f(0.0,0.0,0.0);
	  glVertex2f(230,150);
	  glVertex2f(262,150);
	  glVertex2f(262,198);
	  glVertex2f(232,198);
	  glEnd();
	radius = 13;
	glBegin(GL_POLYGON);
	glColor3f(0.824,0.706,0.549);
	for(i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+247,sin(degInRad)*radius+227);
	}
	glEnd();
    radius = 5;
	glBegin(GL_POLYGON);
	glColor3f(0,0,1);
	for(i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+223,sin(degInRad)*radius+178);
	}
	glEnd();
	glBegin(GL_POLYGON);
   	  glColor3f(0.275,0.51,0.706);
	  glVertex2f(230,150);
	  glVertex2f(262,150);
	  glVertex2f(262,198);
	  glVertex2f(232,198);
	  glEnd();
	  
	glBegin(GL_LINES);
   	  glColor3f(0.0,0.0,0.0);
	  glVertex2f(230,150);
	  glVertex2f(262,150);
	  glVertex2f(262,198);
	  glVertex2f(232,198);
	  glEnd();


}
	void display3(void)
{
		int i;
	for(i=0;i<=3000;i++)
	{
    glClear(GL_COLOR_BUFFER_BIT);
	wall();
	richmen(70,340,0.6);
	glColor3f(0.0,1.0,1.0);
	glPushMatrix();
	glTranslatef(0.0,i*100.0,0.0);
	//richmen(70,300,0.6);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
    steps(89,1);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.2+i)/1000,(5000+200*i)/1000.0,0.0);
	man();
	glPopMatrix();
	//glFlush();
	glPushMatrix();
	glTranslatef(1.83*i/50+250,4*i/50+50.0,0.0);
	glScalef(0.4,0.4,0);
	boy();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	staircase();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.2+14*i)/500-10.0,0,0.0);
	wheelChair(i);
	glPopMatrix();
	glFlush();
	glutSwapBuffers();
	}
	for(i=0;i<=3000;i++)
	{
    glClear(GL_COLOR_BUFFER_BIT);
	wall();
	//glPushMatrix();
	//glTranslatef(4*i,i*100.0,0.0);
	richmen(70,320,0.6);
	//glPopMatrix();
	glColor3f(0.0,1.0,1.0);
	
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
    steps(89,1);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	staircase();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(5*i/150+180.0,24*i/150+130.0,0.0);
	glScalef(0.4,0.4,0);
	man3(10,10);
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.2+14*i)/500-94.0,0,0.0);
	wheelChair(i);
	glPopMatrix();
	glFlush();
	glutSwapBuffers();
	}

	for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}

	void door(void)
{
	glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,0.0);
	glVertex2f(370.0,150.0);
	glVertex2f(390.0,150.0);
	glVertex2f(390.0,100.0);
	glVertex2f(370.0,100.0);
	glEnd();
}

	
void slopeS(float x1,float x2)
{
	glLineWidth(0.5);
	int i;
	glColor3f(0.0,0.0,0.0);
	for(i=0;i<=200;i++)
	{
		glBegin(GL_LINES);
		glVertex2f((0.25*i)+x1,2*i+x2);
		glVertex2f((0.25*i)+(x1+119),2*i+x2);
		glEnd();

	}

}
void ground(void)
{
	glColor3f(0,1,0);
	glBegin(GL_POLYGON);
	glVertex2f(44,1);
	glVertex2f(44,20);
	glVertex2f(444,20);
	glVertex2f(444,1);
    glEnd();

	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(44,20);
	glVertex2f(44,100);
	glVertex2f(444,100);
	glVertex2f(444,20);
    glEnd();


}
void secman(void)
{
	//man
	glColor3f(0.0,0.0,0.0);
  drawCircle(250,89.5,7.5);
    glColor3f(0.917,0.752,0.525);
  drawCircle(250,87.5,7.5);//face
	glBegin(GL_POLYGON);
	glVertex2f(248,80);
	glVertex2f(248,75);
	glVertex2f(252,75);
	glVertex2f(252,80);
	glEnd();//neck
	glColor3f(0.917,0.752,0.525);
		glBegin(GL_POLYGON);
	glVertex2f(243,71);
	glVertex2f(241,76);
	glVertex2f(240,76);
	glVertex2f(241,67);
	glEnd();//hand
	glBegin(GL_POLYGON);
	glVertex2f(257,71);
	glVertex2f(251,63);
	glVertex2f(251,61);
	glVertex2f(259,67);
	glEnd();//hand
	glColor3f(0.0,0.0,0.504);
	glBegin(GL_POLYGON);
	glVertex2f(248,75);
	glVertex2f(243,71);
	glVertex2f(241,67);
	glVertex2f(248,73);
	glEnd();//shoulder
		glBegin(GL_POLYGON);
	glVertex2f(252,75);
	glVertex2f(257,71);
	glVertex2f(259,67);
	glVertex2f(252,73);
	glEnd();//shoulder

	
		glBegin(GL_POLYGON);
	glVertex2f(248,75);
	glVertex2f(245,60);
	glVertex2f(255,60);
	glVertex2f(252,75);
	glEnd();//body
glColor3f(0.871,0.722,0.529);
	glBegin(GL_POLYGON);
	glVertex2f(245,60);
	glVertex2f(242,48);
	glVertex2f(247,48);
	glVertex2f(250,60);
	glEnd();//leg
	glBegin(GL_POLYGON);
	glVertex2f(255,60);
	glVertex2f(258,48);
	glVertex2f(253,48);
	glVertex2f(250,60);
	glEnd();//leg

	
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(242,48);
	glVertex2f(247,48);
	glVertex2f(247,45);
	glVertex2f(242,45);
	glEnd();//shoe
	glBegin(GL_POLYGON);
	glVertex2f(253,48);
	glVertex2f(258,48);
	glVertex2f(258,45);
	glVertex2f(253,45);
	glEnd();//shoe
}
void man13(float x,float y)
{
	//head code
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y+90);
	glVertex2f(x-20,y+110);
	glVertex2f(x-10,y+130);
	glVertex2f(x,y+135);
	glVertex2f(x+10,y+130);
	glVertex2f(x+20,y+110);
	glVertex2f(x+20,y+90);
	glVertex2f(x,y+75);
	glEnd();
	
	// face code
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINES);
	glVertex2f(x-13,y+110);
	glVertex2f(x-7,y+110);
	glVertex2f(x+7,y+110);
	glVertex2f(x+13,y+110);
	glVertex2f(x,y+105);
	glVertex2f(x,y+95);
	glVertex2f(x-05,y+85);
	glVertex2f(x+05,y+85);
	glEnd();

	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(x-10,y+130);
	glVertex2f(x,y+135);
	glVertex2f(x+10,y+130);
	glVertex2f(x+15,y+120);
	glVertex2f(x+10,y+135);
	glVertex2f(x,y+125);
	glVertex2f(x-5,y+130);
	glVertex2f(x-10,y+120);
	glVertex2f(x-15,y+125);
	glVertex2f(x-15,y+130);
	glEnd();

	// shirt code 
	glColor3f(0.604,0.804,0.196);
    glBegin(GL_POLYGON);
	glVertex2f(x,y);
	glVertex2f(x-20,y);
	glVertex2f(x-20,y+70);
	glVertex2f(x-20,y+80);
	glVertex2f(x-15,y+80);
	glVertex2f(x,y+70);
	glVertex2f(x+15,y+80);
	glVertex2f(x+20,y+80);
	glVertex2f(x+20,y+70);
	glVertex2f(x+20,y);
	glVertex2f(x,y);
	glEnd();
	//bag

	glColor3f(0.184,0.314,0.314);
	glBegin(GL_POLYGON);
	glVertex2f(x-12,y+20);
	glVertex2f(x-12,y+65);
	glVertex2f(x+16,y+65);
	glVertex2f(x+16,y+20);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(x-10,y+65);
	glVertex2f(x-12,y+80);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(x+14,y+65);
	glVertex2f(x+16,y+80);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(x-12,y+20);
	glVertex2f(x-20,y+10);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(x+16,y+20);
	glVertex2f(x+20,y+10);
	glEnd();




	// scholders and hands code
	glColor3f(0.604,0.804,0.196);
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y+65);
	glVertex2f(x-20,y+80);
	glVertex2f(x-30,y+80);
	glVertex2f(x-45,y+55);
	glVertex2f(x-45,y+55);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex2f(x+20,y+65);
	glVertex2f(x+20,y+80);
	glVertex2f(x+30,y+80);
	glVertex2f(x+45,y+55);
	glVertex2f(x+45,y+55);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex2f(x+45,y+55);
	glVertex2f(x+35,y);
	glVertex2f(x+25,y);
	glVertex2f(x+35,y+58);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex2f(x-45,y+55);
	glVertex2f(x-35,y);
	glVertex2f(x-25,y);
	glVertex2f(x-35,y+58);
	glEnd();
	
	//pant code

	glColor3f(0.184,0.310,0.310);
	glBegin(GL_POLYGON);
	glVertex2f(x-20,y);
	glVertex2f(x+20,y);
	glVertex2f(x+25,y-40);
	glVertex2f(x+10,y-40);
	glVertex2f(x,y-10);
	glVertex2f(x-10,y-40);
	glVertex2f(x-25,y-40);
	glVertex2f(x-20,y);
	glEnd();

	// legs code
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(x-25,y-40);
	glVertex2f(x-20,y-80);
	glVertex2f(x-15,y-80);
	glVertex2f(x-10,y-40);
	glEnd();

	glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(x-15,y-80);
	glVertex2f(x-20,y-80);
	glVertex2f(x-20,y-90);
	glVertex2f(x-15,y-90);
	glEnd();

	glColor3f(1.0,1.0,1.0);
	glBegin(GL_POLYGON);
	glVertex2f(x+25,y-40);
	glVertex2f(x+20,y-80);
	glVertex2f(x+15,y-80);
	glVertex2f(x+10,y-40);
	glEnd();

	glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(x+15,y-80);
	glVertex2f(x+20,y-80);
	glVertex2f(x+20,y-90);
	glVertex2f(x+15,y-90);
	glEnd();

}
void pillars(void)
{
	//1st pillar
	glBegin(GL_POLYGON);
	glColor3f(0.647,0.164,0.164);
	glVertex2f(20.0,499.0);
	glVertex2f(20.0,1.0);
	glVertex2f(44.0,1.0);
	glVertex2f(44.0,499.0);
	glEnd();
	//2nd pillar
    glBegin(GL_POLYGON);
	glVertex2f(444.0,499.0);
	glVertex2f(444.0,1.0);
	glVertex2f(469.0,1.0);
	glVertex2f(469.0,499.0);
	glEnd();

	//wall
	glBegin(GL_POLYGON);
	glColor3f(0.647,0.647,0.647);
	glVertex2f(44.0,499.0);
	glVertex2f(44.0,320.0);
	glVertex2f(70.0,320.0);
	glVertex2f(70.0,499.0);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3f(0.827,0.827,0.827);
	glVertex2f(70.0,320.0);
	glVertex2f(120.0,380.0);
	glVertex2f(160.0,500.0);
	glVertex2f(70.0,500.0);
	glEnd();

	
	
}
void staircaseS(void)
	{
		
//STEPS
	glLineWidth(5.0);

	//glLineWidth(0.5);
	int i,x1=72.0,x2=0;
	glColor3f(0.0,0.0,0.0);
	for(i=0;i<=30;i++)
	{
		glBegin(GL_LINES);
		glVertex2f((2.65*i)+x1,18*i+x2);
		glVertex2f((2.65*i)+(x1+122),18*i+x2);
		glEnd();

	}
   
	glColor3f(0.627,0.627,0.627);
	//1 pole
    glBegin(GL_POLYGON);
	glVertex2f(60.0,0.0);
	glVertex2f(72.0,0.0);
	glVertex2f(72.0,125.0);
	glVertex2f(60.0,125.0);
	glEnd();
	//2nd pole
	glBegin(GL_POLYGON);
	glVertex2f(194.0,0.0);
	glVertex2f(206.0,0.0);
	glVertex2f(206.0,125.0);
	glVertex2f(194.0,125.0);
	glEnd();
	//3rd pole
	glBegin(GL_POLYGON);
	glVertex2f(325.0,0.0);
	glVertex2f(337.0,0.0);
	glVertex2f(337.0,125.0);
	glVertex2f(325.0,125.0);
	glEnd();
	//1st stairs
	glBegin(GL_POLYGON);
	glColor3f(0.0,0.0,0.0);
	glVertex2f(72.0,125.0);
	glVertex2f(130.0,387.0);
	glVertex2f(178.0,419.0);
	glVertex2f(72.0,0.0);
	glEnd();
	
	//support 1st stairs
	glBegin(GL_POLYGON);
	glColor3f(0.0,0.0,0.0);
	glVertex2f(130.0,387.0);
	glVertex2f(178.0,419.0);
	glVertex2f(104.0,499.0);
	glVertex2f(40.0,499.0);
	glEnd();
	
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
	glVertex2f(206.0,125.0);
	glVertex2f(255.0,419.0);
	glVertex2f(273.0,406.0);
	glVertex2f(206.0,0.0);
	glEnd();
	//3rd stairs
	glBegin(GL_POLYGON);
	glColor3f(0.0,0.0,0.0);
	glVertex2f(337.0,0.0);
	glVertex2f(400.0,416.0);
	glVertex2f(370.0,420.0);
	glVertex2f(337.0,125.0);
	glEnd();
	
	glBegin(GL_POLYGON);
	glColor3f(0.0,0.0,0.0);
	glVertex2f(400.0,416.0);
	glVertex2f(444.0,460.0);
	glVertex2f(444.0,499.0);
	glVertex2f(370.0,420.0);
	glEnd();

	glColor3f(0.627,0.627,0.627);
	glBegin(GL_POLYGON);
	glVertex2f(400.0,416.0);
	glVertex2f(444.0,416.0);
	glVertex2f(444.0,250.0);
	glVertex2f(337.0,0.0);
	glEnd();
}
void wall1()
{
glColor3f(0.961,0.871,0.702);
	glBegin(GL_POLYGON);
	glVertex2f(44.0,-100.0);
	glVertex2f(44.0,499.0);
	glVertex2f(444.0,499.0);
	glVertex2f(444.0,-100.0);
	glEnd();
}


void display4(void)
{
	
	int i;
	
	for(i=0;i<=3000;i++)
	{
	 glClear(GL_COLOR_BUFFER_BIT);
	 wall1();
	 pillars();
	 ground();
	 //text dsce school
	
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	slopeS(206,0);
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	staircaseS();
	glPopMatrix();
	 glPushMatrix();
     glTranslatef((0.0+i)/40-90,(0.0+12*i)/70-10,0);
    secman();
    glPopMatrix();
	glPushMatrix();
    glTranslatef(-(0.2*i)/10+40,(0.15*i)/10-10,0);
	man();
	glPopMatrix();
	
	glPushMatrix();
	glTranslatef((0.0+3*i)/70+70,(0.2+12*i)/70+40,0);
	glScalef(0.3,0.3,0);
	man13(10,10);
	glPopMatrix();
	
 
	//chair
   glPushMatrix();
   glTranslatef(40,25,0);
   wheelChair(0);
   glPopMatrix();
   glColor3f(0.0, 0.0, 0.0);
		glRasterPos3f(395,470,0); 
		Display_on_screen("DSCE school");
   glFlush();

	}


for(i=0;i<1500;i++)
{
	 glClear(GL_COLOR_BUFFER_BIT);
	wall1();
	ground();
	pillars();
  	 
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	slopeS(206,0);
	glPopMatrix();
	//glPointSize(10.0);
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	staircaseS();
	glPopMatrix();
	//pillars();
	
    glPushMatrix();
   glTranslatef(-30,30,0);
    man();
	glPopMatrix();
	//chair
	glPushMatrix();
   glTranslatef(-(2.5+3*i)/50+40,(0.6*i)/50+25,0);
   wheelChair(i);
   glPopMatrix();
    glColor3f(0.0, 0.0, 0.0);
		glRasterPos3f(395,470,0); 
		Display_on_screen("DSCE school");
   glFlush();
 
   }
	for(i=0;i<2500;i++)
	{
	glClear(GL_COLOR_BUFFER_BIT );
	wall1();
	ground();
	pillars();
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	slopeS(206,0);
	glPopMatrix();
	//glPointSize(10.0);
	glPushMatrix();
	glTranslatef(0.0,100.0,0.0);
	staircaseS();
	glPopMatrix();
	//pillars();
    glPushMatrix();
   glTranslatef((i/30)-30,(0.6+4*i)/22+30,0);
    man();
	glPopMatrix();
	//chair
	glPushMatrix();
   glTranslatef(i/50-50.5,(0.6+4*i)/22+43,0);
   wheelChairB(i);
   glPopMatrix();
    glColor3f(0.0, 0.0, 0.0);
		glRasterPos3f(395,470,0); 
		Display_on_screen("DSCE school");
   glFlush();
  }
for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}



void grass(int x,int y,int width,int height)
{
	int i=x;
	glColor3f(0,1,0);
	for(int l=0;l<height;l++)
	{	
		for(int k=0;k<width;k++)
		{
			glBegin(GL_TRIANGLES);
			glVertex2f(x,y);
			glVertex2f(x+10,y);
			glVertex2f(x+5,y+15);
			glVertex2f(x,y);
			glVertex2f(x+12,y);
			glVertex2f(x-5,y+10);
			glVertex2f(x-3,y);
			glVertex2f(x+10,y);
			glVertex2f(x+15,y+10);
			glEnd();
			x+=20;
		}
		y+=15;
		x=i;
	}
}
void betta(float x,float y,float r,float g,float b)
{
	glColor3f(r,g,b);
	glBegin(GL_POLYGON);
	glVertex2f(x,y);
	glVertex2f(x+60,y+100);
	glVertex2f(x+100,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+90,y);
	glVertex2f(x+150,y+80);
	glVertex2f(x+200,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+180,y);
	glVertex2f(x+230,y+90);
	glVertex2f(x+270,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+250,y);
	glVertex2f(x+300,y+100);
	glVertex2f(x+340,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+320,y);
	glVertex2f(x+370,y+70);
	glVertex2f(x+420,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+410,y);
	glVertex2f(x+450,y+90);
	glVertex2f(x+490,y);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(x+470,y);
	glVertex2f(x+510,y+90);
	glVertex2f(x+550,y);
	glEnd();
}

void leaves(float x,float y)
{
	glColor3f(0.2,1.0,0.1);
	glLineWidth(2.0);
	for(float x1=x,y1=y,i=0;i<20;i++,x1+=(250-x)/20,y1+=(350-y)/20)
	{
	glBegin(GL_LINES);
	glVertex2f(x1,y1);
	glVertex2f(x1-3,y1+10);
	glVertex2f(x1,y1);
	glVertex2f(x1-3,y1-10);
	glEnd();
	}
	glColor3f(0.69,0.13,0.13);
	glBegin(GL_LINES);
	glVertex2f(250,350);
	glVertex2f(x,y);
	glEnd();
}

void leavess(float x,float y)
{
	glColor3f(0.2,1.0,0.1);
	glLineWidth(2.0);
	for(float x1=x,y1=y,i=0;i<20;i++,x1+=(270-x)/20,y1+=(350-y)/20)
	{
	glBegin(GL_LINES);
	glVertex2f(x1,y1);
	glVertex2f(x1+3,y1+10);
	glVertex2f(x1,y1);
	glVertex2f(x1+3,y1-10);
	glEnd();
	}
	glColor3f(0.69,0.13,0.13);
	glBegin(GL_LINES);
	glVertex2f(270,350);
	glVertex2f(x,y);
	glEnd();
}

void leavesss(float x,float y)
{
	glColor3f(0.2,1.0,0.1);
	glLineWidth(2.0);
	for(float x1=x,y1=y,i=0;i<20;i++,x1+=(260-x)/20,y1+=(350-y)/20)
	{
	glBegin(GL_LINES);
	glVertex2f(x1,y1);
	glVertex2f(x1-9,y1+3);
	glVertex2f(x1,y1);
	glVertex2f(x1+9,y1+3);
	glEnd();
	}
	glColor3f(0.69,0.13,0.13);
	glBegin(GL_LINES);
	glVertex2f(260,350);
	glVertex2f(x,y);
	glEnd();
}
void branchstrip(float x,float y)
{
	for(int i=0;i<25;i++)
	{
		y=y+10;
	glBegin(GL_LINE_LOOP);
	glVertex2f(x,y);
	glVertex2f(x+10,y);
	glVertex2f(x+10,y+10);
	glVertex2f(x,y+10);
	glEnd();
	}
}

void leaves_s(void)
{
	leaves(210,250);
	leaves(170,260);
	leaves(150,320);
	leaves(170,370);
	leaves(190,420);
	leavess(290,250);
	leavess(350,260);
	leavess(370,320);
	leavess(350,370);
	leavess(330,420);
	leavesss(210,440);
	leavesss(230,450);
	leavesss(250,460);
	leavesss(270,450);
	leavesss(300,440);
}
void fruit(void)
{
	glColor3f(0.502,0.502,0.0);
	drawCircleC(250,350,5,0,10);
	drawCircleC(270,350,5,0,10);
	drawCircleC(260,340,5,0,10);
}

void treecoco(void)
{
	glColor3f(0.545,0.27,0.07);
	glBegin(GL_POLYGON);
	glVertex2f(250,70);
	glVertex2f(260,70);
	glVertex2f(260,350);
	glVertex2f(250,350);
	glEnd();
	glColor3f(0,0,0);
	glBegin(GL_LINE_LOOP);
	glVertex2f(250,70);
	glVertex2f(260,70);
	glVertex2f(260,350);
	glVertex2f(250,350);
	glEnd();
	branchstrip(250,70);
	//leaves_s();
	grass(250,70,1,1);
	fruit();
}
void smallTrees(void)
{
	glLineWidth(1.0);
	treecoco();
	leaves_s();
	fruit();
}
void bbb(void)
{
	glColor3f(0.4,0.2,0);
	glBegin(GL_POLYGON);
	glVertex2f(0,0);
	glVertex2f(0,250);
	glVertex2f(500,250);
	glVertex2f(500,0);
	glEnd();
	glColor3f(0.188,0.337,0.749);
	glBegin(GL_POLYGON);
	glVertex2f(0,250);
	glVertex2f(500,250);
	glVertex2f(500,280);
	glVertex2f(0,280);
	glEnd();
	glColor3f(0.529,0.8,0.98);
	glBegin(GL_POLYGON);
	glVertex2f(500,280);
	glVertex2f(0,280);
	glVertex2f(0,500);
	glVertex2f(500,500);
	glEnd();
	betta(0,280,0.627,0.322,0.176);
	glColor3f(0.188,0.337,0.749);
	glBegin(GL_POLYGON);
	glVertex2f(100,260);
	glVertex2f(150,260);
	glVertex2f(100,300);
	glVertex2f(92,300);
	glEnd();
	glColor3f(1,0.549,0);
	drawCircle(400,400,20);
	grass(0,0,70,17);

    glPushMatrix();
	glScalef(0.3,0.3,0);
	glTranslatef(300,700,0);
	smallTrees();
	glPopMatrix();
	glPushMatrix();
	glScalef(0.5,0.5,0);
	glTranslatef(600,300,0);
	smallTrees();
	glPopMatrix();
    glPushMatrix();
	glScalef(0.33,0.33,0);
	glTranslatef(700,650,0);
	smallTrees();
	glPopMatrix();
	glPushMatrix();
	glScalef(0.6,0.6,0);
	glTranslatef(-200,150,0);
	smallTrees();
	glPopMatrix();

	glColor3f(0.47,0.3,0.07);
	drawCircle(-100.0,-550.0,650);
	drawCircle(550.0,-550.0,650);
	glColor3f(0,0,0);
	drawCircleW(-100.0,-552.0,650);
}

void kathi(void)
{
	glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(255,294);
	glVertex2f(258,294);
	glVertex2f(264,315);
	glVertex2f(259,315);
	glEnd();
	glBegin(GL_POLYGON);
	glVertex2f(264,315);
	glVertex2f(259,315);
	glVertex2f(257,320);
	glEnd();
	glLineWidth(2.0);
	glBegin(GL_LINES);
	glVertex2f(257,294);
	glVertex2f(255,288);
	glEnd();
	glLineWidth(1.0);
}
void manC1(void)
{   glColor3f(0,0,0);
	drawCircle(240,315,12);
	glColor3f(0.412,0.412,0.412);
	drawCircle(238,260,5);
	glColor3f(1,0.87,0.67);
	drawCircle(240,310,12);
	glBegin(GL_POLYGON);
	glVertex2f(238,300);
	glVertex2f(242,300);
	glVertex2f(242,293);
	glVertex2f(238,293);
	glEnd();
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(238,293);
	glVertex2f(233,260);
	glVertex2f(250,260);
	glVertex2f(242,293);
	glEnd();
	glColor3f(0.412,0.412,0.412);
	glBegin(GL_POLYGON);
	glVertex2f(233,260);
	glVertex2f(248,260);
	glVertex2f(258,259);
	glVertex2f(258,248);
	glEnd();
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(258,257);
	glVertex2f(258,249);
	glVertex2f(270,250);
	glVertex2f(270,253);
	glEnd();
	kathi();
	glColor3f(1,0.87,0.67);
	glPointSize(8);
	glBegin(GL_POINTS);
	glVertex2f(270,251.5);
	glVertex2f(256.5,294);
	glEnd();
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(243,290);
	glVertex2f(244,287);
	glVertex2f(250,287);
	glVertex2f(250,290);
	glEnd();
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(238,285);
	glVertex2f(243,285);
	glVertex2f(253,280);
	glVertex2f(250,277);
	glEnd();
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(253,277);
	glVertex2f(255,294);
	glVertex2f(258,294);
	glVertex2f(250,277);
	glEnd();
	glPointSize(3.0);
	glColor3f(0,0,0);
	glBegin(GL_POINTS);
	glVertex2f(246,314);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(244,305);
	glVertex2f(252,305);
	glEnd();
	
}
void manC2(void)
{   glColor3f(0,0,0);
	drawCircle(208,284,12);
	//glColor3f(0.412,0.412,0.412);
	//drawCircle(210,250,5);
	glColor3f(1,0.87,0.67);
	drawCircle(210,280,12);
	glBegin(GL_POLYGON);
	glVertex2f(210,268);
	glVertex2f(217,258);
	glVertex2f(219,259);
	glVertex2f(214,271);
	glEnd();//neck
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(215,263);
	glVertex2f(213,262);
	glVertex2f(240,230);
	glVertex2f(244,259);
	glEnd();//body
	glColor3f(0.412,0.412,0.412);
	glBegin(GL_POLYGON);
	glVertex2f(242,245);
	glVertex2f(260,248);
	glVertex2f(260,240);
	glVertex2f(240,230);
	glEnd();//pant
	glColor3f(0.412,0.412,0.412);
	glBegin(GL_POLYGON);
	glVertex2f(244,259);
	glVertex2f(242,245);
	glVertex2f(255,265);
	glVertex2f(255,275);
	glEnd();//pant
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(260,240);
	glVertex2f(270,230);
	glVertex2f(270,220);
	glVertex2f(260,248);
	glEnd();//leg
	glBegin(GL_POLYGON);
	glVertex2f(255,267);
	glVertex2f(255,273);
	glVertex2f(265,260);
	glVertex2f(265,250);
	glEnd();//leg
//	kathi();
/*	glColor3f(1,0.87,0.67);
	glPointSize(8);
	glBegin(GL_POINTS);
	glVertex2f(270,251.5);
	glVertex2f(256.5,294);
	glEnd();*/
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(220,262);
	glVertex2f(225,262);
	glVertex2f(232,275);
	glVertex2f(227,275);
	glEnd();//hand
	glBegin(GL_POLYGON);
	glVertex2f(218,261);
	glVertex2f(221,261);
	glVertex2f(227,234);
	glVertex2f(222,234);
	glEnd();//hand
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(232,275);
	glVertex2f(227,275);
	glVertex2f(220,295);
	glVertex2f(225,295);
	glEnd();//hand1
	glBegin(GL_POLYGON);
	glVertex2f(227,234);
	glVertex2f(222,234);
	glVertex2f(210,225);
	glVertex2f(215,222);
	glEnd();//hand1
	glPointSize(3.0);
	glColor3f(0,0,0);
	glBegin(GL_POINTS);
	glVertex2f(205,280);
	glVertex2f(213,284);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(210,280);
	glVertex2f(209,275);
	glVertex2f(209,275);
	glVertex2f(212,276);
	glVertex2f(216,276);
	glVertex2f(212,272);
	glEnd();
	
}

void blood(void)
{
	glColor3f(1,0,0);
	drawCircleC(200,85,5,10,0);
}

void display5(void)
{
	int i;
	glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glLineWidth(1.0);
	treecoco();
	leaves_s();
	manC1();
	//man2();
	
	for(i=0;i<100;i++)
	{
		glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glLineWidth(1.0);
	treecoco();
	glPushMatrix();
	glTranslatef(5,0,0);
	leaves_s();
	glPopMatrix();
	manC1();
	glFlush();
	glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glLineWidth(1.0);
	treecoco();
	glPushMatrix();
	glTranslatef(-5,0,0);
	leaves_s();
	glPopMatrix();
	manC1();
	glFlush();
	}
	for(i=0;i<900;i++)
	{
		glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glLineWidth(1.0);
	treecoco();
	glPushMatrix();
	glTranslatef(5,0,0);
	leaves_s();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,-(0.0+1.2*i)/5,0);
	kathi();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,-(0.0+i)/5,0);
	manC2();
	glPopMatrix();
	glFlush();
	}
	bbb();
	glLineWidth(1.0);
	treecoco();
	glPushMatrix();
	glTranslatef(5,0,0);
	leaves_s();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,-(0.0+1.2*900)/5,0);
	kathi();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,-(0.0+900)/5,0);
	manC2();
	glPopMatrix();
	blood();
	glFlush();

	for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}
void machine(void)
{
	glColor3f(0,0,0);
	drawCircleC(245,150,5,0,2);
	glColor3f(0.5,0.5,0.5);
	glBegin(GL_POLYGON);
	glVertex2f(242,158);
	glVertex2f(225,70);
	glVertex2f(195,70);
	glVertex2f(178,158);
	glEnd();
	glLineWidth(2.0);
	glBegin(GL_LINES);
	glVertex2f(230,103);
	glVertex2f(260,103);
	glVertex2f(230,108);
	glVertex2f(250,108);
	glEnd();

	glLineWidth(2.0);
	glBegin(GL_LINE_LOOP);
	for (int angle=270;angle<450;angle++)
	{
		float d=angle*(3.14/180);
		glVertex2f(cos(d)*(3)+260,sin(d)*3+105);
	}
	glEnd();
	glLineWidth(1.0);
	glColor3f(0,0,0);
	drawCircleC(220,195,12,0,0);
	glColor3f(1,0.87,0.67);
	drawCircle(220,190,12);
	glColor3f(0,0,0);
	glPointSize(2.5);
	glBegin(GL_POINTS);
	glVertex2f(228,193);
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(231,186);
	glVertex2f(225,186);
	glEnd();
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(222,180);
	glVertex2f(222,170);
	glVertex2f(218,170);
	glVertex2f(218,180);
	glEnd();//neck
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(223,170);
	glVertex2f(217,170);
	glVertex2f(215,158);
	glVertex2f(230,158);
	glEnd();//body
}
void hand(void)
{
	glColor3f(0.957,0.643,0.376);
	glBegin(GL_POLYGON);
	glVertex2f(228,158);
	glVertex2f(233,158);
	glVertex2f(238,165);
	glVertex2f(233,165);
	glEnd();//hand
	glPushMatrix();
	glTranslatef(-18,-(0.0+750)/5+30,0);
	kathi();
	glPopMatrix();
	glColor3f(1,0.87,0.67);
	glBegin(GL_POLYGON);
	glVertex2f(233,165);
	glVertex2f(238,165);
	glVertex2f(241,172);
	glVertex2f(238,172);
	glEnd();//hand1
	glPointSize(10.0);
	glBegin(GL_POINTS);
	glVertex2f(239,172);
	glEnd();
}
void cow()
   {
	   const float deg2rad=3.14159/180;
	  glBegin(GL_POLYGON);
   //	  glColor3f(0.50,0.20,0.12);
	  glVertex2f(39,118);
	  glVertex2f(64,118);
	  glVertex2f(62,100);
	  glVertex2f(44,100);
	  glEnd();
	  glBegin(GL_POLYGON);
   //	  glColor3f(0.50,0.20,0.12);
	  glVertex2f(64,118);
	  glVertex2f(63,115);
	  glVertex2f(65,105);
	  glVertex2f(66,105);
	  glEnd();
	 
	  glBegin(GL_POLYGON);
   	 // glColor3f(0.50,0.20,0.12);
	  glVertex2f(59,100);
	  glVertex2f(62,100);
	  glVertex2f(61,83);
	  glVertex2f(60,83);
	  glEnd();
	  glBegin(GL_POLYGON);
   	//  glColor3f(0.50,0.20,0.12);
	  glVertex2f(56,100);
	  glVertex2f(59,100);
	  glVertex2f(58,83);
	  glVertex2f(57,83);
	  glEnd();
	   glBegin(GL_POLYGON);
   	 // glColor3f(0.50,0.20,0.12);
	  glVertex2f(44,100);
	  glVertex2f(47,100);
	  glVertex2f(46,83);
	  glVertex2f(45,83);
	  glEnd();
	   glBegin(GL_POLYGON);
  // 	  glColor3f(0.50,0.20,0.12);
	  glVertex2f(45,110);
	  glVertex2f(50,108);
	  glVertex2f(39,95);
	  glVertex2f(41,93);
	  glEnd();
      glBegin(GL_POLYGON);
 //  	  glColor3f(0.50,0.20,0.12);
	  glVertex2f(39,95);
	  glVertex2f(41,93);
	  glVertex2f(40,83);
	  glVertex2f(42,83);
	  glEnd();
	  glBegin(GL_POLYGON);
 //  	  glColor3f(0.50,0.20,0.12);
	  glVertex2f(35,120);
	  glVertex2f(45,120);
	  glVertex2f(41,105);
	  glVertex2f(39,105);
	  glEnd();
        glBegin(GL_TRIANGLES);
	    glVertex2f(36,120);
		glVertex2f(39,120);
		glVertex2f(35.5,129);
	    glEnd();
		glBegin(GL_TRIANGLES);
	    glVertex2f(40,120);
		glVertex2f(44,120);
		glVertex2f(45.5,129);
	    glEnd();	
	  int radius = 2;
	glBegin(GL_POLYGON);
//	glColor3f(0.50,0.20,0.12);
	for(int i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+40,sin(degInRad)*radius+105);
	}
	glEnd();
       	 radius = 4;
	glBegin(GL_POLYGON);
//	glColor3f(0.50,0.20,0.12);
	for(int i=0;i<360;i++)
	{
		float degInRad=i*deg2rad;
		glVertex2f(cos(degInRad)*radius+40,sin(degInRad)*radius+120);
	}
	glEnd();	  
	 glBegin(GL_POINTS);
      glColor3f(0,0,0);
	  glVertex2f(37,115);
      glVertex2f(40,115);
	  glEnd();
   }	  
	
void huts(void)
{
	glColor3f(1,0.87,0.678);
	glPushMatrix();
	glTranslatef(5,20,0);
	cow();
	glPopMatrix();
	glColor3f(1,1,1);
	cow();
	glColor3f(0.87,0.72,0.53);
	glBegin(GL_POLYGON);
 	  glVertex2f(360,200);
	  glVertex2f(400,200);
	  glVertex2f(400,130);
	  glVertex2f(360,130);
	  glEnd();
	   glBegin(GL_POLYGON);
	    glVertex2f(350,190);
		glVertex2f(380,250);
		glVertex2f(410,190);
	    glEnd();
		glColor3f(0,0,0);
		 glBegin(GL_LINE_LOOP);
	    glVertex2f(350,190);
		glVertex2f(380,250);
		glVertex2f(410,190);
	    glEnd();
		glColor3f(1,1,1);
		glBegin(GL_POLYGON);
	    glVertex2f(375,130);
		glVertex2f(385,130);
		glVertex2f(385,160);
		glVertex2f(375,160);
	    glEnd();
		glLineWidth(1.0);
		glColor3f(0,0,0);
		glBegin(GL_LINE_LOOP);
	    glVertex2f(375,130);
		glVertex2f(385,130);
		glVertex2f(385,160);
		glVertex2f(375,160);
	    glEnd();
}
   
void cloud1(void)
{
	glColor3f(1.0,1.0,1.0);
	drawCircle(250,420,15);
	drawCircle(225,420,15);
    drawCircle(275,420,15);
	drawCircle(240,433,15);
	drawCircle(270,435,15);
}
void cloud2(void)
{
	glColor3f(1.0,1.0,1.0);
	drawCircle(100,455,10);
	drawCircle(105,459,15);
	drawCircle(110,450,15);
	drawCircle(90,450,15);
}
void display6(void)
{
	int i;
	for(i=0;i<750;i++)
	{
	glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glPushMatrix();
	glTranslatef(-(0.0+i)/10,0,0.0);
	cloud1();
	glPopMatrix();
	huts();
	glLineWidth(1.0);
	treecoco();
	leaves_s();
	glColor3f(0.502,0.502,0.0);
	drawCircleC(245,335,5,0,10);
	glPushMatrix();
	glTranslatef(0,(0.0+i)/5,0);
	machine();
	glPopMatrix();
	glFlush();
	}
	bbb();
	huts();
	glLineWidth(1.0);
	treecoco();
	leaves_s();
	glColor3f(0.502,0.502,0.0);
	drawCircleC(245,335,5,0,10);
	glPushMatrix();
	glTranslatef(0,(0.0+750)/5,0);
	machine();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(0,(0.0+750)/5,0);
	hand();
	glPopMatrix();
	glFlush();
	for(int j=0;j<10000;j++)
		for(int k=0;k<10000;k++);
	for(i=0;i<700;i++)
	{
	glClear(GL_COLOR_BUFFER_BIT);
	bbb();
	glPushMatrix();
	glTranslatef(-75-(i)/10,0,0.0);
	cloud1();
	glPopMatrix();
	huts();
	glLineWidth(1.0);
	treecoco();
	leaves_s();
	glPushMatrix();
	glTranslatef(0,-(0.0+i)/5+125,0);
	machine();
	glPopMatrix();
	glFlush();
	}
	for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}
void tracks(void)
{   
		glColor3f(0,0,0);
	glBegin(GL_POLYGON);
	glVertex2f(0,153);
    glVertex2f(500,348.1);
	glVertex2f(500,448.1);
	glVertex2f(0,253);
	glEnd();
	glColor3f(0.827,0.827,0.827);
	glLineWidth(5.0);
	
	glBegin(GL_LINES);
	for(int i=0;i<=31;i++)
	{
	glVertex2f((15*i)+20.0,(6.1*i)+157.0);
	glVertex2f((15*i)+20.0,(6.1*i)+257.0);
	}
	glEnd();
	glBegin(GL_LINES);
	glVertex2f(0,153);
    glVertex2f(500,348.1);
	glVertex2f(0,253);
	glVertex2f(500,448.1);
	glEnd();
}

void door(float x,float y)
{	glColor3f(1.0,1.0,1.0); 
	glBegin(GL_POLYGON);
//	glVertex2f(250.0,252.0);
	glVertex2f(x,y);
	glVertex2f(x+15.0,y+9.0);
	glVertex2f(x+15.0,y+78.0);
	glVertex2f(x,y+70.0);
	glEnd();

	glBegin(GL_POLYGON);
	glVertex2f(x+30,y+80-40);
	glVertex2f(x+60,y+90-40);
	glVertex2f(x+68,y+124-40);
	glVertex2f(x+40,y+115-40);
    glEnd();

	glBegin(GL_POLYGON);
	glVertex2f(x+80-10,y+113-60);
	glVertex2f(x+60+50-10,4+y+119-60);
	glVertex2f(x+68+50-10,y+4+153-60);
	glVertex2f(x+40+50-10,y+35+113-60);
    glEnd();
}

void trainsteps(float x,float y)
{
	//inside train
	glLineWidth(2.5);
	glColor3f(0,0,0);
	glBegin(GL_LINES);
		glVertex2f(x,y+23);
		glVertex2f(x+10,y+31.5);
	glEnd();
	glBegin(GL_LINES);
		glVertex2f(x,y+16);
		glVertex2f(x+10,y+24.5);
	glEnd();
	glBegin(GL_LINES);
		glVertex2f(x,y+9);
		glVertex2f(x+10,y+17.5);
	glEnd();
	glBegin(GL_LINES);
		glVertex2f(x,y+2);
		glVertex2f(x+10,y+10.5);
	glEnd();
	glLineWidth(1.0);
		glBegin(GL_LINES);
		glVertex2f(x+10,y+76);
		glVertex2f(x+10,y+5.5);
	glEnd();
		glLineWidth(1.0);
		glBegin(GL_LINES);
		glVertex2f(x+10,y+31.5);
		glVertex2f(x+15,y+9);
	glEnd();
}

void train(void)
{
		glColor3f(1.0,0.0,0.0);
		glLineWidth(1.0);
   
	glBegin(GL_POLYGON);
	glVertex2f(700.0,515.0);
	glVertex2f(200,370.0);
	glVertex2f(160.0,220.0);
	glVertex2f(700.0,425.0);
	glEnd();
	glColor3f(1,1,1);
	glBegin(GL_POLYGON);
    glVertex2f(160.0,220.0);
	glVertex2f(205.0,235.0);
	glVertex2f(205.0,255.0);
	glVertex2f(164.0,235.0);
	glEnd();
	//glColor3f(0.0,1.0,0.0); 
	glBegin(GL_POLYGON);
	glVertex2f(190.0,315.0);
	glVertex2f(220,325);
	glVertex2f(228,359);
	glVertex2f(200,350);
    glEnd();
	glPushMatrix();
	door(250.0,252.0);
	trainsteps(250,252);
	glScalef(0.8,0.8,0);
	door(475,377);
	trainsteps(475,377);
	door(600,423);
	trainsteps(600,423);
	door(740,475);
	trainsteps(740,475);
	glPopMatrix();
	
}

void trainslope(float x,float y)
{
	glColor3f(0,0,0);
    glBegin(GL_POLYGON);
	glVertex2f(x,y);
	glVertex2f(x,y+23);
	glVertex2f(x+10,y+31.5);
	glVertex2f(x+10,y+8.5);
	glEnd();
}

void slopeT(void)
{
//	door(250.0,252.0);
	trainslope(250,252);
	glScalef(0.8,0.8,0);
//	door(475,377);
	trainslope(475,377);
//	door(600,423);
	trainslope(600,423);
//	door(740,475);
	trainslope(740,475);
}

void backgroundback(void)
{

		glBegin(GL_POLYGON);//sky
    glColor3f(0.0,0.8,0.8);
    glVertex2f(0.0,500.0);
	glVertex2f(0.0,253.0);
	glVertex2f(500.0,448.1);
	glVertex2f(500.0,500.0);
	glEnd();
    glBegin(GL_POLYGON);
    glColor3f(0.956,0.643,0.3764);
	glVertex2f(0.0,253.0);
	glVertex2f(0.0,300.1);
	glVertex2f(500.0,446.1);
	glVertex2f(500.0,446.1);
	glEnd();
	//track differentiation
	glColor3f(0.5,0.5,0.5);
		//grond
    glBegin(GL_POLYGON);
    glColor3f(0.96,1.0,0.98);
	glVertex2f(0.0,0.0);
	glVertex2f(500.0,0.0);
	glVertex2f(500.0,348.1);
	glVertex2f(0.0,153.0);
	glEnd();
	
    //bench

	glColor3f(0,0,0);
	drawCircle(390,143,7);
	glBegin(GL_POLYGON);
    glColor3f(0.647,0.321,0.176);
	glVertex2f(375.0,100.0);
	glVertex2f(410.0,100.0);
	glVertex2f(410.0,140.0);
	glVertex2f(375.0,140.0);
	glEnd();
    glBegin(GL_POLYGON);
    glColor3f(0.647,0.321,0.176);
	glVertex2f(410.0,100.0);
	glVertex2f(420.0,120.0);
	glVertex2f(420.0,120.1);
	glVertex2f(410.0,120.0);
	glEnd();
	
	glLineWidth(3.0);
	glColor3f(0.0,0.0,1.0);
    glBegin(GL_LINES);
    glColor3f(0.0,0.0,1.0);
	glVertex2f(375.0,100.0);
	glVertex2f(375.0,70.0);
	glEnd();
	glBegin(GL_LINES);
    glColor3f(0.0,0.0,1.0);
	glVertex2f(410.0,100.0);
	glVertex2f(410.0,70.0);
	glEnd();
	glBegin(GL_LINES);
    glColor3f(0.0,0.0,1.0);
	glVertex2f(420.0,120.0);
	glVertex2f(420.0,90.0);
	glEnd();





	//sun
	glColor3f(1.0,1.0,0.0);
	drawCircle(290,455,15);
    //branch of tree
	glBegin(GL_POLYGON);
	glColor3f(1,0.4,0.2);
	glVertex2f(50.0,290.5);
	glVertex2f(65.0,290.5);
	glVertex2f(63.0,400.0);
	glVertex2f(52.0,400.0);
	glEnd();
	//tree top
	glColor3f(0,1,0);
	drawCircle(40,400,15);
	drawCircle(55,400,15);
	drawCircle(70,400,15);
	drawCircle(47.5,415,20);
	drawCircle(62.5,415,20);
	drawCircle(52.5,435,20);
	
	//pole
	glBegin(GL_POLYGON);
	glColor3f(0,0,1);
	glVertex2f(450.0,40.0);
	glVertex2f(460.0,40.0);
	glVertex2f(460.0,200.0);
	glVertex2f(450.0,200.0);
	glEnd();
	//top board
	glBegin(GL_POLYGON);
	glColor3f(1,1,0);
	glVertex2f(500.0,200.0);
	glVertex2f(500.0,250.0);
	glVertex2f(450.0,250.0);
	glVertex2f(450.0,200.0);
	glEnd();
	drawText(460,230,0.0,0.0,0.0,"Railway");
	drawText(460,210,0.0,0.0,0.0,"Station");
	
	//dustbin
	glBegin(GL_POLYGON);
	glColor3f(0.627,0.322,0.176);
	glVertex2f(70.0,40.0);
	glVertex2f(90.0,40.0);
	glVertex2f(90.0,90.0);
	glVertex2f(70.0,90.0);

	glVertex2f(70.0,40.0);
	glVertex2f(65.0,35.0);
	glVertex2f(95.0,35.0);
	glVertex2f(90.0,40.0);
	glEnd();
	drawText(72,70,0.0,0.0,0.0,"Use");
	drawText(75,55,0.0,0.0,0.0,"Me");
}

void buildingwin(int x,int y)
{
	glBegin(GL_POLYGON);
	glColor3f(1,1,1);
	glVertex2f(x+40,y+350);
	glVertex2f(x+90,y+360);
	glVertex2f(x+90,y+410);
	glVertex2f(x+40,y+400);
	glEnd();
	 glColor3f(0.917,0.752,0.525);
	drawCircle(70.0,370.0, 7.0);
	glLineWidth(3.0);
	glColor3f(0.0,0.0,1.0);
	//man in the window
    glBegin(GL_POLYGON);
	glColor3f(0,0,1);
    glVertex2f(65.0,365.0);
	glVertex2f(60.0,355.0);
    glVertex2f(80.0,355.0);
	glVertex2f(75.0,365.0);
	glEnd();
    glBegin(GL_POINTS);
	glPointSize(500.05);
	glColor3f(0,0,0);
    glVertex2f(68.0,370.0);
	glVertex2f(72.0,370.0);
    glEnd();
	glBegin(GL_POLYGON);
    glColor3f(0,0,1);
    glVertex2f(78.0,360.0);
	glVertex2f(79.0,358.0);
    glVertex2f(85.0,362.0);
	glVertex2f(87.0,365.0);
	glEnd();
	//flag
	glBegin(GL_LINES);
    glColor3f(0.545,0.271,0.075);
    glVertex2f(85.0,364.0);
	glVertex2f(110.0,364.0);
	glEnd();
	glBegin(GL_POLYGON);
    glColor3f(0,0.392,0);
    glVertex2f(110.0,367.0);
	glVertex2f(115.0,360.0);
    glVertex2f(100.0,355.0);
	glVertex2f(95.0,366.0);
	glEnd();

	drawText(  20,  410, 1, 1, 1,"Signal"); 
    drawText(  45,  410, 1, 1, 1,"Control"); 
    drawText(  75,  410, 1, 1, 1,"Office"); 
}

void buildings1(void)
{
	glBegin(GL_POLYGON);
	glColor3f(0.1,0.1,0.1);
	glVertex2f(10.0,270.0);
	glVertex2f(100.0,300.0);
	glVertex2f(100.0,460.0);
	glVertex2f(10.0,430.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.5,0.5,0.5);
	glVertex2f(10.0,430);
	glVertex2f(10.0,270.0);
	glVertex2f(0,280.0);
	glVertex2f(0,440.0);
	glEnd();
	glBegin(GL_POLYGON);
	glColor3f(0.3,0.3,0.3);
	glVertex2f(10.0,430);
	glVertex2f(-40.0,480);
	glVertex2f(50.0,510.0);
	glVertex2f(100.0,460.0);
	glEnd();
	buildingwin(0,0);
}

void display7(void)
{
	int i;
for(i=0;i<1500;i++)
{
	 glClear(GL_COLOR_BUFFER_BIT);
	 backgroundback();
	 man();
	 bman(410,250,0.5);
	 wheelChair(0);
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+i)/20,-(0.0+i)/50,0.0);
	train();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+i)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+i)/10,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
}
for(i=0;i<1000;i++)
{
	glClear(GL_COLOR_BUFFER_BIT);
	 backgroundback();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/20,-(0.0+1500)/50,0.0);
	train();
	glPopMatrix();
	 glPushMatrix();
	 glTranslatef(-(0.0+1.6*i)/23.5,(0.0+0.9*i)/5.0,0.0);
	 man();
	 glPopMatrix();
	 glPushMatrix();
	 glTranslatef((0.0+0.55*i)/23.5+40,(0.0+i)/4.5,0.0);
	 glScalef(0.8,0.8,0);
	 wheelChair(i);
	 glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+i)/10+150,0,0.0);
	cloud2();
	
	glPopMatrix();
	bman(410,250,0.5);
	glFlush();
}
glClear(GL_COLOR_BUFFER_BIT);
backgroundback();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/20,-(0.0+1500)/50,0.0);
	train();
	glPopMatrix();
	 glPushMatrix();
	 glTranslatef((0.0+0.55*1000)/23.5+40,(0.0+1000)/4.5,0.0);
	 glScalef(0.8,0.8,0);
	 wheelChair(0);
	 glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+1000)/10+150,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
	for(i=0;i<15000;i+=5)
	{
		glClear(GL_COLOR_BUFFER_BIT);
		backgroundback();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0+i)/20-75,-(0+i)/50-30,0.0);
	train();
	glPopMatrix();
	 glPushMatrix();
	 glTranslatef((0.0+0.55*1000)/23.5+40,(0.0+1000)/4.5,0.0);
	 glScalef(0.8,0.8,0);
	 wheelChair(0);
	 glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	bman(410,250,0.5);
	glPushMatrix();
	glTranslatef((0.0+1000)/10+150,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
	glutSwapBuffers();
	}
for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();
}
void display8(void)
{	
	int i;
for(i=0;i<1500;i++)
{
	 glClear(GL_COLOR_BUFFER_BIT);
	 backgroundback();
	 buildings1();
	 man();
	 richmen(170,375,0.4);
	 wheelChair(0);
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+i)/20,-(0.0+i)/50,0.0);
	train();
	slopeT();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+i)/15,0,0.0);
	cloud1();
	glPopMatrix();
	//man();
	glPushMatrix();
	glTranslatef((0.0+i)/10,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
}
for(i=0;i<150;i++)
{
	 glClear(GL_COLOR_BUFFER_BIT);
	 backgroundback();
	 buildings1();
	 man();
	 wheelChair(0);
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/20,-(0.0+1500)/50,0.0);
	train();
	slopeT();
	glPopMatrix();
	 glPushMatrix();
	 glTranslatef(-(0.0+1500)/20+0.1*i/16,-i*0.8/8-(0.0+1500)/50,0.0);
	 slopeT();
	 glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+1500)/10,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
}
for(i=0;i<1000;i++)
{
	glClear(GL_COLOR_BUFFER_BIT);
	 backgroundback();
	 buildings1();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/20,-(0.0+1500)/50,0.0);
	train();
	slopeT();
	glPopMatrix();
	glPushMatrix();
	 glTranslatef(-(0.0+1500)/20+15/16,-120/8-(0.0+1500)/50,0.0);
	 slopeT();
	 glPopMatrix();
	 glPushMatrix();
	 glTranslatef(-(0.0+1.6*i)/23.5,(0.0+0.9*i)/5.0,0.0);
	 man();
	 glPopMatrix();
	 glPushMatrix();
	 glTranslatef((0.0+0.3*i)/23.5+40,(0.0+1.1*i)/4.5,0.0);
	 glScalef(0.8,0.8,0);
	 wheelChair(i);
	 glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+i)/10+150,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
}

glClear(GL_COLOR_BUFFER_BIT);
backgroundback();
buildings1();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/20,-(0.0+1500)/50,0.0);
	train();
	slopeT();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+1000)/10+150,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
	for(i=0;i<15000;i+=5)
	{
		glClear(GL_COLOR_BUFFER_BIT);
		backgroundback();
		buildings1();
	 tracks();
	glPushMatrix();
	glTranslatef(-(0+i)/20-75,-(0+i)/50-30,0.0);
	train();
	slopeT();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(-(0.0+1500)/15,0,0.0);
	cloud1();
	glPopMatrix();
	glPushMatrix();
	glTranslatef((0.0+1000)/10+150,0,0.0);
	cloud2();
	glPopMatrix();
	glFlush();
	glutSwapBuffers();
	}
	for(int l=0;l<10000;l++)
		for(int z=0;z<100000;z++)
		{}
	display12();
	glFlush();
	glutSwapBuffers();

}





void display11()
{

	glClearColor(0.294,0.0,0.510,0.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	
	drawText(230,470,1,1,1,"PROJECT TITLE:");
	drawText(180,450,1,1,0,"UNIVERSAL DESIGN FOR HANDICAPPED");

	drawText(50,400,1,1,1,"Developed By:");
	
	drawText(100,380,0,1,0,"A N RAVITEJA");
	drawText(105,360,1,1,1,"(1DS14CS001)");

	drawText(100,320,0,1,0,"ANTRA GUHA");
	drawText(105,300,1,1,1,"(1DS14CS010)");

	drawText(100,260,0,1,0,"ANUSHREE");
	drawText(105,240,1,1,1,"(1DS14CS013)");

	drawText(300.0,200.0,1,1,1,"UNDER THE GUIDENCE OF");
	drawText(300.0,180.0,1,1,0,"Prof.Shasidhar B");
	
	drawText(300.0,160.0,1,1,0,"Assistant Professor, Dept of CSE");
	drawText(300.0,140,1,1,0,"DSCE, Bangalore");
	drawText(300.0,100.0,1,1,0,"Prof.Sahana Damale");
	
	drawText(300.0,80.0,1,1,0,"Assistant Professor, Dept of CSE");
	drawText(300.0,60,1,1,0,"DSCE, Bangalore");

	drawText(220,30,0,1,0,"PRESS 'Y' TO START");
	glFlush();
}


void Keys(unsigned char k,int x,int y)
{
	switch(k)
	{
	case 'y': display12();
		      break;
	case '1': display1();
		      break;
	case '2': display2();
		      break;
	case '3': display3();
		      break;
	case '4': display4();
		      break;
	case '5': display5();
		      break;
	case '6': display6();
		      break;
	case '7': display7();
		      break;
	case '8': display8();
		      break;
	default : exit(0);
	}
}

void init()
{
	glClearColor(0.0,0.0,0.0,0.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0,500,0,500);
}


void main(int argc,char** argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowSize(500,500);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Universal Design.....");
	glutDisplayFunc(display11);
	glutKeyboardFunc(Keys);
	init();
	glutMainLoop();
}




